From 746e576feddf48a90b859963539d4144329d648c Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Sat, 12 Mar 2022 20:39:07 +0800
Subject: [PATCH 1/6] Add flavor extra spec parameters and image property for
 Intel Software Guard Extensions (SGX)

Add a new flavor extra spec parameter: "trait:HW_CPU_X86_SGX", and a new image property: "trait:HW_CPU_X86_SGX". Valuable settings for extra spec parameter are "required" or "forbidden", but "required" is the only valuable setting for image property. There is a conflict when extra spec parameter is set to "forbidden" and image property set to "required", which will cause guest's creation to fail. In other cases, the created guest's CPU has SGX features when one of extra spec parameter or image property is set to "required".
What's more, add a new flavor extra spec parameter: "resources:CUSTOM_SGX_EPC_MB", which indicates how much Enclave Page Cache (EPC) does the guest need. This parameter takes effect if guest's CPU has SGX features.

Co-authored-by: Gondermann <gondermann@b1-systems.de>
---
 doc/source/admin/intel-sgx.rst              | 107 ++++++++++++++++++++
 nova/conf/libvirt.py                        |  62 ++++++++++++
 nova/tests/unit/virt/libvirt/test_driver.py |  58 +++++++++++
 nova/tests/unit/virt/libvirt/test_host.py   | 103 +++++++++++++++++++
 nova/tests/unit/virt/test_hardware.py       |  52 ++++++++++
 nova/virt/hardware.py                       |  33 ++++++
 nova/virt/libvirt/config.py                 |  37 +++++++
 nova/virt/libvirt/driver.py                 |  51 ++++++++++
 nova/virt/libvirt/host.py                   |  39 +++++++
 9 files changed, 542 insertions(+)
 create mode 100755 doc/source/admin/intel-sgx.rst

diff --git a/doc/source/admin/intel-sgx.rst b/doc/source/admin/intel-sgx.rst
new file mode 100755
index 0000000000..ce5a82f0ed
--- /dev/null
+++ b/doc/source/admin/intel-sgx.rst
@@ -0,0 +1,107 @@
+INTEL SGX (Software Guard Extensions)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+`Software Guard Extensions (SGX)`__ offers hardware-based memory
+encryption that isolates specific application code and data in memory.
+It allows user-level code to allocate private regions of memory, called
+enclaves, which are designed to be protected from processes running
+at higher privilege levels. By the passthrough of CPU SGX features,
+guests created on SGX-capable compute hosts can also run enclaves.
+
+__ https://www.intel.com/content/www/us/en/developer/tools/software-guard-extensions/overview.html
+
+Requirements for SGX
+--------------------
+
+First the operator will need to ensure the following prerequisites are met:
+
+- At least one of the Nova compute hosts must be INTEL hardware capable
+  of supporting SGX.  SGX control options are successfully enabled in BIOS.
+  It is entirely possible for the compute plane to be a mix of hardware which
+  can and cannot support SGX, the maximum number of simultaneously
+  running guests with SGX will be limited by the quantity and quality of
+  SGX-capable hardware available.
+
+- An appropriately configured software stack on those compute hosts,
+  so that the various layers are all SGX ready:
+
+  - kernel >= 4.16
+  - QEMU >= 2.12
+  - libvirt >= 4.5
+
+Deploying SGX-capable infrastructure
+------------------------------------
+
+In order for users to be able to use SGX, the operator will need to
+perform the following steps:
+
+- A cloud administrator will need to create SGX-enabled flavors and images.
+SGX-enabled flavor has `resources:CUSTOM_SGX_EPC_MB=xxx` and
+`trait:HW_CPU_X86_SGX=requried` in its extra specs. The value of `xxx`
+represents the memory size of EPC that guest needs, which is greater than 0 and
+less than the SGX-capable host's supply. SGX-enabled image has the property
+of `trait:HW_CPU_X86_SGX=required`.
+
+
+- Configure the :oslo.config:option:`libvirt.sgx_epc_mb` option
+  in :file:`nova.conf` to represent the EPC memory that
+  an SGX-capable compute host can provide to guests. For example:
+
+  .. code-block:: ini
+
+     [libvirt]
+     sgx_epc_mb = 256
+
+- Configure :oslo.config:option:`libvirt.sgx_features` option
+  in :file:`nova.conf` to represent the host's SGX CPU features which
+  should be passed to SGX guests. For example:
+
+  .. code-block:: ini
+
+  [libvirt]
+  sgx_features = sgx, sgxlc, sgx1, sgx-debug, sgx-mode64, sgx-provisionkey, sgx-tokenkey
+
+  .. caution::
+
+    The way Linux gets CPU features is through the CPUID instruction.
+    Libvirt file `/var/share/libvirt/cpu-map/x86-features.xml` defines
+    CPUID's input and output of each CPU feature. Through this file and
+    executing the CPUID instruction, Libvirt can obtain the features
+    supported by host's CPU. Features configured in option
+    `sgx_features` should be supported by host. Normally,
+    `/var/share/libvirt/cpu-map/x86-features.xml` does not contain
+    defintions of SGX features. The following needs to be added.
+
+    .. code-block:: xml
+
+    <!-- SGX features -->
+    <feature name="sgx">
+      <cpuid eax_in='0x07' ecx_in='0x00' ebx='0x00000004'/>
+    </feature>
+    <feature name="sgxlc">
+      <cpuid eax_in='0x07' ecx_in='0x00' ecx='0x40000000'/>
+    </feature>
+    <feature name="sgx1">
+      <cpuid eax_in='0x12' ecx_in='0x00' eax='0x00000001'/>
+    </feature>
+    <feature name="sgx-debug">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000002'/>
+    </feature>
+    <feature name="sgx-mode64">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000004'/>
+    </feature>
+    <feature name="sgx-provisionkey">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000010'/>
+    </feature>
+    <feature name="sgx-tokenkey">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000020'/>
+    </feature>
+
+
+Launching SGX instances
+-----------------------
+
+Once an operator has covered the above steps, users can launch SGX
+instances by requesting a SGX-enabled flavor. If the image used by
+SGX instances is not SGX-enable, users need to manually install
+the SGX driver. SGX-enabled image already contains the SGX driver
diff --git a/nova/conf/libvirt.py b/nova/conf/libvirt.py
index 8b1c148dbd..75923f690d 100644
--- a/nova/conf/libvirt.py
+++ b/nova/conf/libvirt.py
@@ -917,6 +917,68 @@ Related options:
 * ``compute_driver`` (libvirt)
 * ``virt_type`` (qemu)
 """),
+    cfg.IntOpt('sgx_epc_mb',
+               default=0,
+               min=0,
+               help="""
+Available capacity of SGX EPC in MiB for host's guests.
+This value should be less than SGX EPC configuration in host's BIOS.
+
+Set to 0 to disable SGX.
+
+Related options:
+
+* ``virt_type``: ``sgx_epc_mb`` has only value when ``virt_type``
+  set to kvm or qemu. SGX cannot be enabled on other hypervisors.
+
+"""),
+    cfg.ListOpt('sgx_features',
+                default=['sgx',
+                         'sgxlc',
+                         'sgx1',
+                         'sgx-debug',
+                         'sgx-mode64',
+                         'sgx-provisionkey',
+                         'sgx-tokenkey'],
+                help="""
+An list of SGX features should be added to the CPU of SGX guest.
+
+Add their definitions to Libvirt installation file
+``/usr/share/libvirt/cpu_map/x86_features.xml``::
+
+    <!-- SGX features -->
+    <feature name="sgx">
+      <cpuid eax_in='0x07' ecx_in='0x00' ebx='0x00000004'/>
+    </feature>
+    <feature name="sgxlc">
+      <cpuid eax_in='0x07' ecx_in='0x00' ecx='0x40000000'/>
+    </feature>
+    <feature name="sgx1">
+      <cpuid eax_in='0x12' ecx_in='0x00' eax='0x00000001'/>
+    </feature>
+    <feature name="sgx-debug">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000002'/>
+    </feature>
+    <feature name="sgx-mode64">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000004'/>
+    </feature>
+    <feature name="sgx-provisionkey">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000010'/>
+    </feature>
+    <feature name="sgx-tokenkey">
+      <cpuid eax_in='0x12' ecx_in='0x01' eax='0x00000020'/>
+    </feature>
+
+when definitions don't exist.
+
+Related options:
+
+* ``virt_type``: ``sgx_features`` has only value when ``virt_type``
+  set to kvm or qemu. SGX cannot be enabled on other hypervisors.
+
+* ``sgx_epc_mb``: If ``sgx_epc_mb`` is set to 0,
+  these features would not be added to guest CPU.
+""")
 ]
 
 libvirt_imagebackend_opts = [
diff --git a/nova/tests/unit/virt/libvirt/test_driver.py b/nova/tests/unit/virt/libvirt/test_driver.py
index baabe14487..42ccb3bc29 100644
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -29794,3 +29794,61 @@ class AsyncDeviceEventsHandlerTestCase(test.NoDBTestCase):
         # the third client timed out
         self.assertIsNone(received_event3)
         self.assert_handler_clean()
+
+
+class TestLibvirtSGX(test.NoDBTestCase):
+    """Libvirt driver tests for Intel SGX"""
+
+    class Temp(dict):
+
+        def __getattr__(self, key):
+            return self.get(key)
+
+        def __setattr__(self, key, value):
+            self[key] = value
+
+    def setUp(self):
+        super(TestLibvirtSGX, self).setUp()
+        self.driver = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)
+
+    @mock.patch('nova.virt.libvirt.host.Host.supports_intel_sgx',
+                new=mock.Mock(return_value=False))
+    def test_get_host_sgx_epc_mb_zero(self):
+        self.assertEqual(0, self.driver._get_host_sgx_epc_mb())
+
+    @mock.patch('nova.virt.libvirt.host.Host.supports_intel_sgx',
+                new=mock.Mock(return_value=False))
+    def test_get_host_sgx_epc_mb_config(self):
+        self.flags(sgx_epc_mb=100, group='libvirt')
+        self.assertEqual(100, self.driver._get_host_sgx_epc_mb())
+
+    def test_guest_add_sgx_xen(self):
+        guest_tmp = self.Temp({'guest': None, 'virt_type': 'xen'})
+        result = self.driver._guest_add_sgx(guest_tmp, None, None)
+        self.assertIsNone(result)
+
+    @mock.patch('nova.virt.hardware.get_sgx_trait_constraint',
+                new=mock.Mock(return_value=False))
+    def test_guest_add_sgx_kvm_unrequire_sgx(self):
+        guest_tmp = self.Temp({'guest': None, 'virt_type': 'kvm'})
+        result = self.driver._guest_add_sgx(guest_tmp, None, None)
+        self.assertIsNone(result)
+
+    @mock.patch('nova.virt.hardware.get_sgx_trait_constraint',
+                new=mock.Mock(return_value=True))
+    def test_guest_add_sgx_kvm_require_sgx(self):
+        epc_size = 10
+        self.flags(sgx_features=[], group='libvirt')
+        guest_tmp = self.Temp({'guest': None, 'virt_type': 'kvm'})
+        flavor = self.Temp(
+            {'extra_specs': {
+                'resources:' + libvirt_driver.SGX_RESOURCE_CLASS: epc_size}
+            }
+        )
+        result = self.driver._guest_add_sgx(guest_tmp, flavor, None)
+        self.assertIsNone(result)
+        self.assertTrue(
+            isinstance(guest_tmp.sgx,
+                       vconfig.LibvirtConfigGuestQemuCommandLine))
+        _str = 'memory-backend-epc,id=mem1,size=%dM,prealloc=on' % epc_size
+        self.assertTrue(_str in guest_tmp.sgx.arguments)
diff --git a/nova/tests/unit/virt/libvirt/test_host.py b/nova/tests/unit/virt/libvirt/test_host.py
index a94dea48d3..69ae5689c1 100644
--- a/nova/tests/unit/virt/libvirt/test_host.py
+++ b/nova/tests/unit/virt/libvirt/test_host.py
@@ -2201,3 +2201,106 @@ class LoadersTestCase(test.NoDBTestCase):
             mock_glob.assert_called_once_with(
                 '/usr/share/qemu/firmware/*.json')
             mock_open.assert_called_once_with('10_fake.json', 'rb')
+
+
+class TestLibvirtSGXSupport(test.NoDBTestCase):
+    """Libvirt host tests for INTEL SGX."""
+
+    def setUp(self):
+        super(TestLibvirtSGXSupport, self).setUp()
+
+        self.useFixture(fakelibvirt.FakeLibvirtFixture())
+        self.host = host.Host("qemu:///system")
+
+    @mock.patch.object(os.path, 'exists', return_value=False)
+    def test_kernel_parameter_missing(self, fake_exists):
+        self.assertFalse(self.host._kernel_supports_intel_sgx())
+        fake_exists.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
+
+    @mock.patch.object(os.path, 'exists', return_value=True)
+    @mock.patch('builtins.open', mock.mock_open(read_data="Y\n"))
+    def test_kernel_parameter_pass(self, fake_exists):
+        self.assertTrue(self.host._kernel_supports_intel_sgx())
+        fake_exists.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
+
+    @mock.patch.object(os.path, 'exists', return_value=True)
+    @mock.patch('builtins.open', mock.mock_open(read_data="N\n"))
+    def test_kernel_parameter_fail(self, fake_exists):
+        self.assertFalse(self.host._kernel_supports_intel_sgx())
+        fake_exists.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
+
+    @mock.patch('nova.virt.libvirt.host.Host._kernel_supports_intel_sgx',
+                new=mock.Mock(return_value=True))
+    def test_supports_intel_sgx(self):
+        fake_caps_xml = """
+<capabilities>
+    <host>
+        <uuid>cef19ce0-0ca2-11df-855d-b19fbce37686</uuid>
+        <cpu>
+            <arch>x86_64</arch>
+            <vendor>Intel</vendor>
+            <microcode version='218104544'/>
+            <counter name='tsc' frequency='2593882000' scaling='yes'/>
+            <feature name='sgx'/>
+            <feature name='sgxlc'/>
+            <feature name='sgx1'/>
+            <feature name='sgx-debug'/>
+            <feature name='sgx-mode64'/>
+            <feature name='sgx-provisionkey'/>
+            <feature name='sgx-tokenkey'/>
+        </cpu>
+    </host>
+</capabilities>"""
+        with mock.patch.object(fakelibvirt.virConnect, 'getCapabilities',
+                               return_value=fake_caps_xml):
+            features = ['sgx', 'sgxlc', 'sgx1', 'sgx-debug',
+                        'sgx-mode64', 'sgx-provisionkey', 'sgx-tokenkey']
+            self.flags(sgx_features=features, group='libvirt')
+            self.assertTrue(self.host.supports_intel_sgx)
+
+    @mock.patch('nova.virt.libvirt.host.Host._kernel_supports_intel_sgx',
+                new=mock.Mock(return_value=True))
+    def test_unsupports_intel_sgx_1(self):
+        fake_caps_xml = """
+<capabilities>
+    <host>
+        <uuid>cef19ce0-0ca2-11df-855d-b19fbce37686</uuid>
+        <cpu>
+            <arch>x86_64</arch>
+            <vendor>Intel</vendor>
+            <microcode version='218104544'/>
+            <counter name='tsc' frequency='2593882000' scaling='yes'/>
+        </cpu>
+    </host>
+</capabilities>"""
+        with mock.patch.object(fakelibvirt.virConnect, 'getCapabilities',
+                               return_value=fake_caps_xml):
+            features = ['sgx', 'sgxlc', 'sgx1', 'sgx-debug',
+                        'sgx-mode64', 'sgx-provisionkey', 'sgx-tokenkey']
+            self.flags(sgx_features=features, group='libvirt')
+            self.assertFalse(self.host.supports_intel_sgx)
+
+    @mock.patch('nova.virt.libvirt.host.Host._kernel_supports_intel_sgx',
+                new=mock.Mock(return_value=True))
+    def test_unsupports_intel_sgx_2(self):
+        fake_caps_xml = """
+<capabilities>
+    <host>
+        <uuid>cef19ce0-0ca2-11df-855d-b19fbce37686</uuid>
+        <cpu>
+            <arch>x86_64</arch>
+            <vendor>Intel</vendor>
+            <microcode version='218104544'/>
+            <counter name='tsc' frequency='2593882000' scaling='yes'/>
+            <feature name='sgx'/>
+            <feature name='sgxlc'/>
+            <feature name='sgx1'/>
+        </cpu>
+    </host>
+</capabilities>"""
+        with mock.patch.object(fakelibvirt.virConnect, 'getCapabilities',
+                               return_value=fake_caps_xml):
+            features = ['sgx', 'sgxlc', 'sgx1', 'sgx-debug',
+                        'sgx-mode64', 'sgx-provisionkey', 'sgx-tokenkey']
+            self.flags(sgx_features=features, group='libvirt')
+            self.assertFalse(self.host.supports_intel_sgx)
diff --git a/nova/tests/unit/virt/test_hardware.py b/nova/tests/unit/virt/test_hardware.py
index 381213f972..2b8ed58f68 100644
--- a/nova/tests/unit/virt/test_hardware.py
+++ b/nova/tests/unit/virt/test_hardware.py
@@ -6075,3 +6075,55 @@ class HostCellsSortingTestCase(test.NoDBTestCase):
                 {},
                 pci_stats = self.pci_stats)
         self.assertInstanceNUMAcellOrder([3, 2, 0], instance_topology)
+
+
+class SGXRequiredTestCase(test.NoDBTestCase):
+    flavor_name = 'm1.faketiny'
+    image_name = 'fakecirros'
+    image_id = '7ec4448e-f3fd-44b1-b172-9a7980f0f29f'
+
+    def _test_get_sgx_trait_constraint(self, extra_specs, image_props, assert_func):
+        flavor = objects.Flavor(name=self.flavor_name,
+                                extra_specs=extra_specs)
+        image_meta = objects.ImageMeta.from_dict({
+            'id': self.image_id,
+            'name': self.image_name,
+            'properties': image_props})
+        if assert_func in [self.assertTrue, self.assertFalse]:
+            assert_func(hw.get_sgx_trait_constraint(flavor, image_meta))
+        if assert_func == self.assertRaises:
+            assert_func(exception.FlavorImageConflict,
+                        hw.get_sgx_trait_constraint, flavor, image_meta)
+
+    def test_sgx_trait_flavor_and_image_constraint(self):
+        trait_name = "trait:HW_CPU_X86_SGX"
+        # `cases` is a list of tuples. elements in each tuple represents:
+        # flavor spec, image prop and assert func.
+        cases = [
+            (None, None, self.assertFalse),
+            (None, 'required', self.assertTrue),
+            (None, 'forbidden', self.assertFalse),
+            (None, 'other', self.assertFalse),
+            ('required', None, self.assertTrue),
+            ('required', 'required', self.assertTrue),
+            ('required', 'forbidden', self.assertTrue),
+            ('required', 'other', self.assertTrue),
+            ('forbidden', None, self.assertFalse),
+            ('forbidden', 'required', self.assertRaises),
+            ('forbidden', 'forbidden', self.assertFalse),
+            ('forbidden', 'other', self.assertFalse),
+            ('other', 'None', self.assertFalse),
+            ('other', 'required', self.assertTrue),
+            ('other', 'forbidden', self.assertFalse),
+            ('other', 'other', self.assertFalse),
+        ]
+        for case in cases:
+            flavor_epc, image_epc, assert_func = case
+            extra_specs = {}
+            if flavor_epc is not None:
+                extra_specs[trait_name] = flavor_epc
+            image_props = {}
+            if image_epc is not None:
+                image_props[trait_name] = image_epc
+            self._test_get_sgx_trait_constraint(
+                extra_specs, image_props, assert_func)
diff --git a/nova/virt/hardware.py b/nova/virt/hardware.py
index 5ca0dda596..da3679297d 100644
--- a/nova/virt/hardware.py
+++ b/nova/virt/hardware.py
@@ -2760,3 +2760,36 @@ def get_ephemeral_encryption_format(
             )
         return eph_format
     return None
+
+
+def get_sgx_trait_constraint(
+    flavor: 'objects.Flavor',
+    image_meta: 'objects.ImageMeta',
+) -> bool:
+    """Get the intel sgx trait constrants based on the flavor and image.
+
+    :param flavor: an objects.Flavor object
+    :param image_meta: an objects.ImageMeta object
+    :raises: nova.exception.FlavorImageConflict
+    :returns: boolean indicating whether sgx was requested
+    """
+    trait_name = "HW_CPU_X86_SGX"
+    flavor_str = flavor.get(
+        'extra_specs', {}).get('trait:' + trait_name, None)
+
+    traits = image_meta.properties.get('traits_required', [])
+    image_require_sgx = trait_name in traits
+    if flavor_str == "forbidden" and image_require_sgx:
+        emsg = _(
+            "Flavor %(flavor_name)s has trait:HW_CPU_X86_SGX extra spec "
+            "explicitly set to forbidden, conflicting with image"
+            "%(image_name)s which has trait:HW_CPU_X86_SGX property "
+            "explicitly set to required."
+        )
+        data = {
+            'flavor_name': flavor.name,
+            'image_name': image_meta.name,
+        }
+        raise exception.FlavorImageConflict(emsg % data)
+
+    return flavor_str == "required" or image_require_sgx
diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index 2a1e703d31..42e4005295 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -40,6 +40,7 @@ from nova.virt import hardware
 
 # Namespace to use for Nova specific metadata items in XML
 NOVA_NS = "http://openstack.org/xmlns/libvirt/nova/1.1"
+QEMU_NS = "http://libvirt.org/schemas/domain/qemu/1.0"
 
 
 class LibvirtConfigObject(object):
@@ -2900,6 +2901,35 @@ class LibvirtConfigGuestFeatureVMCoreInfo(LibvirtConfigGuestFeature):
         super().__init__('vmcoreinfo', **kwargs)
 
 
+class LibvirtConfigGuestQemuCommandLine(LibvirtConfigObject):
+
+    def __init__(self, **kwargs):
+        super(LibvirtConfigGuestQemuCommandLine, self).__init__(
+            root_name='commandline', ns_prefix="qemu", ns_uri=QEMU_NS)
+        # List of strings, each item is the argument of the command line.
+        # For example, launch a SGX guest with the cmd:
+        # `qemu-system-x86_64 \
+        # -cpu host,+sgx-provisionkey \
+        # -object memory-backend-epc,id=mem1,size=64M,prealloc=on \
+        # -M sgx-epc.0.memdev=mem1,sgx-epc.0.node=0`,
+        # arguments will be:
+        # ['-cpu',
+        #  'host,+sgx-provisionkey',
+        #  '-object',
+        #  'memory-backend-epc,id=mem1,size=64M,prealloc=on',
+        #  '-M',
+        #  'sgx-epc.0.memdev=mem1,sgx-epc.0.node=0']
+        self.arguments = []
+
+    def format_dom(self):
+        cmdline = super(LibvirtConfigGuestQemuCommandLine, self).format_dom()
+        for argument in self.arguments:
+            arg = self._new_node("arg")
+            arg.set("value", argument)
+            cmdline.append(arg)
+        return cmdline
+
+
 class LibvirtConfigGuest(LibvirtConfigObject):
 
     def __init__(self, **kwargs):
@@ -2945,6 +2975,7 @@ class LibvirtConfigGuest(LibvirtConfigObject):
         self.idmaps = []
         self.perf_events = []
         self.launch_security = None
+        self.sgx = None
 
     def _format_basic_props(self, root):
         root.append(self._text_node("uuid", self.uuid))
@@ -3070,6 +3101,10 @@ class LibvirtConfigGuest(LibvirtConfigObject):
         if self.launch_security is not None:
             root.append(self.launch_security.format_dom())
 
+    def _format_sgx(self, root):
+        if self.sgx is not None:
+            root.append(self.sgx.format_dom())
+
     def format_dom(self):
         root = super(LibvirtConfigGuest, self).format_dom()
 
@@ -3100,6 +3135,8 @@ class LibvirtConfigGuest(LibvirtConfigObject):
 
         self._format_sev(root)
 
+        self._format_sgx(root)
+
         return root
 
     def _parse_basic_props(self, xmldoc):
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 863ac60af0..d73b163758 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -158,6 +158,8 @@ CONSOLE = "console=tty0 console=ttyS0 console=hvc0"
 GuestNumaConfig = collections.namedtuple(
     'GuestNumaConfig', ['cpuset', 'cputune', 'numaconfig', 'numatune'])
 
+SGX_RESOURCE_CLASS = "CUSTOM_SGX_EPC_MB"
+
 
 class InjectionInfo(collections.namedtuple(
         'InjectionInfo', ['network_info', 'files', 'admin_pass'])):
@@ -7139,6 +7141,9 @@ class LibvirtDriver(driver.ComputeDriver):
             self._guest_configure_sev(guest, caps.host.cpu.arch,
                                       guest.os_mach_type)
 
+        if self._host.supports_intel_sgx:
+            self._guest_add_sgx(guest, flavor, image_meta)
+
         if vpmems:
             self._guest_add_vpmems(guest, vpmems)
 
@@ -7207,6 +7212,13 @@ class LibvirtDriver(driver.ComputeDriver):
         return hardware.get_mem_encryption_constraint(flavor, image_meta,
                                                       mach_type)
 
+    def _get_guest_sgx_epc_mb(self, flavor):
+        """Size of sgx epc memory is determined by
+        `resources:CUSTOM_SGX_EPC_MB` specified in flavor extra_spec.
+        """
+        epc_mb = flavor.extra_specs.get('resources:' + SGX_RESOURCE_CLASS)
+        return None if epc_mb is None else int(epc_mb)
+
     def _guest_configure_sev(self, guest, arch, mach_type):
         sev = self._find_sev_feature(arch, mach_type)
         if sev is None:
@@ -7232,6 +7244,27 @@ class LibvirtDriver(driver.ComputeDriver):
         launch_security.reduced_phys_bits = sev.reduced_phys_bits
         guest.launch_security = launch_security
 
+    def _guest_add_sgx(self, guest, flavor, image_meta):
+        if guest.virt_type in ('qemu', 'kvm'):
+            if hardware.get_sgx_trait_constraint(flavor, image_meta):
+                for flag in CONF.libvirt.sgx_features:
+                    guest.cpu.add_feature(
+                        vconfig.LibvirtConfigGuestCPUFeature(flag))
+            else:
+                return
+            sgx_epc_mb = self._get_guest_sgx_epc_mb(flavor)
+            if sgx_epc_mb is None:
+                return
+            sgx_qemu_commandline = vconfig.LibvirtConfigGuestQemuCommandLine()
+            sgx_qemu_commandline.arguments = [
+                '-object',
+                'memory-backend-epc,id=mem1,size=%dM,'
+                'prealloc=on' % sgx_epc_mb,
+                '-M',
+                'sgx-epc.0.memdev=mem1'
+            ]
+            guest.sgx = sgx_qemu_commandline
+
     def _find_sev_feature(self, arch, mach_type):
         """Search domain capabilities for the given arch and machine type
         for the <sev> element under <features>, and return it if found.
@@ -8882,6 +8915,7 @@ class LibvirtDriver(driver.ComputeDriver):
         vcpus = len(self._get_vcpu_available())
         pcpus = len(self._get_pcpu_available())
         memory_enc_slots = self._get_memory_encrypted_slots()
+        sgx_epc_mb = self._get_host_sgx_epc_mb()
 
         # NOTE(yikun): If the inv record does not exists, the allocation_ratio
         # will use the CONF.xxx_allocation_ratio value if xxx_allocation_ratio
@@ -8936,6 +8970,16 @@ class LibvirtDriver(driver.ComputeDriver):
                 'reserved': 0,
             }
 
+        if sgx_epc_mb:
+            result[SGX_RESOURCE_CLASS] = {
+                'total': sgx_epc_mb,
+                'min_unit': 1,
+                'max_unit': sgx_epc_mb,
+                'step_size': 1,
+                'allocation_ratio': 1,
+                'reserved': 0,
+            }
+
         # If a sharing DISK_GB provider exists in the provider tree, then our
         # storage is shared, and we should not report the DISK_GB inventory in
         # the compute node provider.
@@ -9059,6 +9103,12 @@ class LibvirtDriver(driver.ComputeDriver):
 
         return self._static_traits
 
+    def _get_host_sgx_epc_mb(self):
+        if not self._host.supports_intel_sgx:
+            return 0
+        else:
+            return CONF.libvirt.sgx_epc_mb
+
     @staticmethod
     def _is_reshape_needed_vgpu_on_root(provider_tree, nodename):
         """Determine if root RP has VGPU inventories.
@@ -12434,6 +12484,7 @@ class LibvirtDriver(driver.ComputeDriver):
         """
         traits = self._get_cpu_feature_traits()
         traits[ot.HW_CPU_X86_AMD_SEV] = self._host.supports_amd_sev
+        traits[ot.HW_CPU_X86_SGX] = self._host.supports_intel_sgx
         traits[ot.HW_CPU_HYPERTHREADING] = self._host.has_hyperthreading
 
         return traits
diff --git a/nova/virt/libvirt/host.py b/nova/virt/libvirt/host.py
index b57751093e..9a84da1924 100644
--- a/nova/virt/libvirt/host.py
+++ b/nova/virt/libvirt/host.py
@@ -87,6 +87,7 @@ CONF = nova.conf.CONF
 HV_DRIVER_QEMU = "QEMU"
 
 SEV_KERNEL_PARAM_FILE = '/sys/module/kvm_amd/parameters/sev'
+SGX_KERNEL_PARAM_FILE = '/sys/module/kvm_intel/parameters/sgx'
 
 # These are taken from the spec
 # https://github.com/qemu/qemu/blob/v5.2.0/docs/interop/firmware.json
@@ -162,6 +163,7 @@ class Host(object):
         # kernel, QEMU, and/or libvirt. These are determined on demand and
         # memoized by various properties below
         self._supports_amd_sev: ty.Optional[bool] = None
+        self._supports_intel_sgx: ty.Optional[bool] = None
         self._supports_uefi: ty.Optional[bool] = None
         self._supports_secure_boot: ty.Optional[bool] = None
 
@@ -1800,6 +1802,16 @@ class Host(object):
             LOG.debug("%s contains [%s]", SEV_KERNEL_PARAM_FILE, content)
             return strutils.bool_from_string(content)
 
+    def _kernel_supports_intel_sgx(self):
+        if not os.path.exists(SGX_KERNEL_PARAM_FILE):
+            LOG.debug("%s does not exist", SGX_KERNEL_PARAM_FILE)
+            return False
+
+        with open(SGX_KERNEL_PARAM_FILE) as f:
+            contents = f.read()
+            LOG.debug("%s contains [%s]", SGX_KERNEL_PARAM_FILE, contents)
+            return contents == "Y\n"
+
     @property
     def supports_amd_sev(self) -> bool:
         """Determine if the host supports AMD SEV for guests.
@@ -1841,6 +1853,33 @@ class Host(object):
         LOG.debug("No AMD SEV support detected for any (arch, machine_type)")
         return self._supports_amd_sev
 
+    @property
+    def supports_intel_sgx(self) -> bool:
+        """Determine if the host supports INTEL SGX for guests.
+
+        Returns a boolean indicating whether INTEL SGX (Software Guard
+        Extensions) is supported. This is conditional on support
+        in the hardware, kernel, qemu, and libvirt.
+        """
+        if self._supports_intel_sgx is not None:
+            return self._supports_intel_sgx
+
+        self._supports_intel_sgx = False
+
+        if not self._kernel_supports_intel_sgx():
+            LOG.info("kernel doesn't support INTEL SGX")
+            return self._supports_intel_sgx
+
+        # Host CPU should have SGX features defined in CONF.
+        caps = self.get_capabilities()
+        feature_names = [f.name for f in caps.host.cpu.features]
+        if not set(CONF.libvirt.sgx_features).issubset(feature_names):
+            LOG.info("Host does not support SGX features")
+            return self._supports_intel_sgx
+
+        self._supports_intel_sgx = True
+        return self._supports_intel_sgx
+
     @property
     def supports_remote_managed_ports(self) -> bool:
         """Determine if the host supports remote managed ports.
-- 
2.40.1


From 7504a1cc1b21aed08351964f91a254671c9088a1 Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Sat, 14 May 2022 01:50:28 +0800
Subject: [PATCH 2/6] Add quota support for SGX

Co-authored-by: Gondermann <gondermann@b1-systems.de>
---
 .../flavors/flavors-detail-resp.json          |  21 ++++
 .../flavors/flavors-list-resp.json            |  14 +++
 .../flavors/v2.55/flavor-get-resp.json        |   6 +-
 .../flavors/v2.55/flavors-detail-resp.json    |  23 ++++
 .../flavors/v2.55/flavors-list-resp.json      |  15 +++
 .../flavors/v2.61/flavor-get-resp.json        |   6 +-
 .../flavors/v2.61/flavors-detail-resp.json    |  27 +++++
 .../flavors/v2.61/flavors-list-resp.json      |  15 +++
 .../flavors/v2.75/flavor-get-resp.json        |   6 +-
 .../flavors/v2.75/flavors-detail-resp.json    |  27 +++++
 .../flavors/v2.75/flavors-list-resp.json      |  15 +++
 .../quota-classes-show-get-resp.json          |   3 +-
 .../quota-classes-update-post-resp.json       |   3 +-
 .../v2.50/quota-classes-show-get-resp.json    |   3 +-
 .../v2.50/quota-classes-update-post-resp.json |   3 +-
 .../v2.57/quota-classes-show-get-resp.json    |   3 +-
 .../v2.57/quota-classes-update-post-resp.json |   3 +-
 .../quotas-show-defaults-get-resp.json        |   3 +-
 .../quotas-show-detail-get-resp.json          |   5 +
 .../quotas-show-get-resp.json                 |   3 +-
 .../quotas-update-force-post-resp.json        |   3 +-
 .../quotas-update-post-resp.json              |   3 +-
 .../user-quotas-show-get-resp.json            |   3 +-
 .../user-quotas-update-post-resp.json         |   3 +-
 .../quotas-show-defaults-get-resp.json        |   3 +-
 .../quotas-show-detail-get-resp.json          |   5 +
 .../os-quota-sets/quotas-show-get-resp.json   |   3 +-
 .../quotas-update-force-post-resp.json        |   3 +-
 .../quotas-update-post-resp.json              |   3 +-
 .../user-quotas-show-get-resp.json            |   3 +-
 .../user-quotas-update-post-resp.json         |   3 +-
 .../v2.36/quotas-show-defaults-get-resp.json  |   3 +-
 .../v2.36/quotas-show-detail-get-resp.json    |   5 +
 .../v2.36/quotas-show-get-resp.json           |   3 +-
 .../v2.36/quotas-update-force-post-resp.json  |   3 +-
 .../v2.36/quotas-update-post-resp.json        |   3 +-
 .../v2.36/user-quotas-show-get-resp.json      |   3 +-
 .../v2.36/user-quotas-update-post-resp.json   |   3 +-
 .../v2.57/quotas-show-defaults-get-resp.json  |   3 +-
 .../v2.57/quotas-show-detail-get-resp.json    |   5 +
 .../v2.57/quotas-show-get-resp.json           |   3 +-
 .../v2.57/quotas-update-force-post-resp.json  |   3 +-
 .../v2.57/quotas-update-post-resp.json        |   3 +-
 .../v2.57/user-quotas-show-get-resp.json      |   3 +-
 .../v2.57/user-quotas-update-post-resp.json   |   3 +-
 nova/accelerator/cyborg.py                    |   6 +-
 .../openstack/compute/flavors_extraspecs.py   |  10 ++
 .../openstack/compute/schemas/quota_sets.py   |   1 +
 nova/compute/api.py                           |   3 +-
 nova/compute/utils.py                         |  49 ++++----
 nova/conf/quota.py                            |  11 ++
 nova/limit/placement.py                       |   1 +
 nova/objects/flavor.py                        |  13 ++
 nova/objects/instance.py                      |  41 ++++---
 nova/quota.py                                 |  13 +-
 nova/scheduler/client/report.py               |   8 +-
 nova/scheduler/utils.py                       |  10 +-
 nova/tests/fixtures/nova.py                   |   7 ++
 .../flavors/flavors-detail-resp.json.tpl      |  21 ++++
 .../flavors/flavors-list-resp.json.tpl        |  14 +++
 .../v2.55/flavors-detail-resp.json.tpl        |  22 ++++
 .../flavors/v2.55/flavors-list-resp.json.tpl  |  15 +++
 .../v2.61/flavors-detail-resp.json.tpl        |  26 ++++
 .../flavors/v2.61/flavors-list-resp.json.tpl  |  15 +++
 .../v2.75/flavors-detail-resp.json.tpl        |  26 ++++
 .../flavors/v2.75/flavors-list-resp.json.tpl  |  17 ++-
 .../quota-classes-show-get-resp.json.tpl      |   3 +-
 .../quota-classes-update-post-resp.json.tpl   |   3 +-
 .../quota-classes-show-get-resp.json.tpl      |   3 +-
 .../quota-classes-update-post-req.json.tpl    |   3 +-
 .../quota-classes-update-post-resp.json.tpl   |   3 +-
 .../quota-classes-show-get-resp.json.tpl      |   3 +-
 .../quota-classes-update-post-req.json.tpl    |   3 +-
 .../quota-classes-update-post-resp.json.tpl   |   3 +-
 .../quotas-show-defaults-get-resp.json.tpl    |   3 +-
 .../quotas-show-detail-get-resp.json.tpl      |   5 +
 .../quotas-show-get-resp.json.tpl             |   3 +-
 .../quotas-update-force-post-resp.json.tpl    |   3 +-
 .../quotas-update-post-resp.json.tpl          |   3 +-
 .../user-quotas-show-get-resp.json.tpl        |   3 +-
 .../user-quotas-update-post-resp.json.tpl     |   3 +-
 .../quotas-show-defaults-get-resp.json.tpl    |   3 +-
 .../quotas-show-detail-get-resp.json.tpl      |   5 +
 .../quotas-show-get-resp.json.tpl             |   3 +-
 .../quotas-update-force-post-resp.json.tpl    |   3 +-
 .../quotas-update-post-resp.json.tpl          |   3 +-
 .../user-quotas-show-get-resp.json.tpl        |   3 +-
 .../user-quotas-update-post-resp.json.tpl     |   3 +-
 .../quotas-show-defaults-get-resp.json.tpl    |   3 +-
 .../quotas-show-detail-get-resp.json.tpl      |   5 +
 .../v2.36/quotas-show-get-resp.json.tpl       |   3 +-
 .../quotas-update-force-post-resp.json.tpl    |   3 +-
 .../v2.36/quotas-update-post-resp.json.tpl    |   3 +-
 .../v2.36/user-quotas-show-get-resp.json.tpl  |   3 +-
 .../user-quotas-update-post-resp.json.tpl     |   3 +-
 .../quotas-show-defaults-get-resp.json.tpl    |   3 +-
 .../quotas-show-detail-get-resp.json.tpl      |   5 +
 .../v2.57/quotas-show-get-resp.json.tpl       |   3 +-
 .../quotas-update-force-post-resp.json.tpl    |   3 +-
 .../v2.57/quotas-update-post-resp.json.tpl    |   3 +-
 .../v2.57/user-quotas-show-get-resp.json.tpl  |   3 +-
 .../user-quotas-update-post-resp.json.tpl     |   3 +-
 nova/tests/functional/test_nova_manage.py     |  26 ++--
 .../openstack/compute/test_quota_classes.py   |  20 +++-
 .../unit/api/openstack/compute/test_quotas.py |  43 +++++--
 nova/tests/unit/compute/test_api.py           |  46 +++----
 nova/tests/unit/compute/test_compute.py       |   3 +-
 nova/tests/unit/compute/test_utils.py         |  33 ++++--
 nova/tests/unit/conductor/test_conductor.py   |   5 +-
 nova/tests/unit/limit/test_placement.py       |  14 +--
 nova/tests/unit/objects/test_flavor.py        |   4 +-
 nova/tests/unit/objects/test_objects.py       |   2 +-
 .../unit/scheduler/client/test_report.py      |  21 ++--
 nova/tests/unit/test_fixtures.py              |   2 +-
 nova/tests/unit/test_quota.py                 | 112 ++++++++++++++++--
 nova/tests/unit/virt/libvirt/test_driver.py   |   2 +-
 nova/utils.py                                 |   7 ++
 nova/virt/libvirt/driver.py                   |   7 +-
 118 files changed, 865 insertions(+), 212 deletions(-)

diff --git a/doc/api_samples/flavors/flavors-detail-resp.json b/doc/api_samples/flavors/flavors-detail-resp.json
index f59f287ded..62cc0ac21b 100644
--- a/doc/api_samples/flavors/flavors-detail-resp.json
+++ b/doc/api_samples/flavors/flavors-detail-resp.json
@@ -131,6 +131,27 @@
             "swap": "",
             "vcpus": 1,
             "rxtx_factor": 1.0
+        },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "os-flavor-access:is_public": true,
+            "id": "7",
+            "links": [
+                {   "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx",
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0
         }
     ]
 }
diff --git a/doc/api_samples/flavors/flavors-list-resp.json b/doc/api_samples/flavors/flavors-list-resp.json
index d203972963..45a28e7eeb 100644
--- a/doc/api_samples/flavors/flavors-list-resp.json
+++ b/doc/api_samples/flavors/flavors-list-resp.json
@@ -83,6 +83,20 @@
                 }
             ],
             "name": "m1.tiny.specs"
+        },
+        {
+            "id": "7",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx"
         }
     ]
 }
diff --git a/doc/api_samples/flavors/v2.55/flavor-get-resp.json b/doc/api_samples/flavors/v2.55/flavor-get-resp.json
index 5757772409..d41f755b7f 100644
--- a/doc/api_samples/flavors/v2.55/flavor-get-resp.json
+++ b/doc/api_samples/flavors/v2.55/flavor-get-resp.json
@@ -4,14 +4,14 @@
         "disk": 20,
         "OS-FLV-EXT-DATA:ephemeral": 0,
         "os-flavor-access:is_public": true,
-        "id": "7",
+        "id": "8",
         "links": [
             {
-                "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/7",
+                "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
                 "rel": "self"
             },
             {
-                "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/7",
+                "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
                 "rel": "bookmark"
             }
         ],
diff --git a/doc/api_samples/flavors/v2.55/flavors-detail-resp.json b/doc/api_samples/flavors/v2.55/flavors-detail-resp.json
index 2f181cca91..2bbf95f3e5 100644
--- a/doc/api_samples/flavors/v2.55/flavors-detail-resp.json
+++ b/doc/api_samples/flavors/v2.55/flavors-detail-resp.json
@@ -154,6 +154,29 @@
                     "rel": "bookmark"
                 }
             ],
+            "name": "m1.small.sgx",
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0,
+            "description": null
+        },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "os-flavor-access:is_public": true,
+            "id": "8",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "bookmark"
+                }
+            ],
             "name": "m1.small.description",
             "ram": 2048,
             "swap": "",
diff --git a/doc/api_samples/flavors/v2.55/flavors-list-resp.json b/doc/api_samples/flavors/v2.55/flavors-list-resp.json
index f368ed5c66..a68a4f6a1c 100644
--- a/doc/api_samples/flavors/v2.55/flavors-list-resp.json
+++ b/doc/api_samples/flavors/v2.55/flavors-list-resp.json
@@ -102,6 +102,21 @@
                     "rel": "bookmark"
                 }
             ],
+            "name": "m1.small.sgx",
+            "description": null
+        },
+        {
+            "id": "8",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "bookmark"
+                }
+            ],
             "name": "m1.small.description",
             "description": "test description"
         }
diff --git a/doc/api_samples/flavors/v2.61/flavor-get-resp.json b/doc/api_samples/flavors/v2.61/flavor-get-resp.json
index 324b7711b8..e30d17eb2a 100644
--- a/doc/api_samples/flavors/v2.61/flavor-get-resp.json
+++ b/doc/api_samples/flavors/v2.61/flavor-get-resp.json
@@ -4,14 +4,14 @@
         "disk": 20,
         "OS-FLV-EXT-DATA:ephemeral": 0,
         "os-flavor-access:is_public": true,
-        "id": "7",
+        "id": "8",
         "links": [
             {
-                "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/7",
+                "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
                 "rel": "self"
             },
             {
-                "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/7",
+                "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
                 "rel": "bookmark"
             }
         ],
diff --git a/doc/api_samples/flavors/v2.61/flavors-detail-resp.json b/doc/api_samples/flavors/v2.61/flavors-detail-resp.json
index d4efe491f2..a044b93dd7 100644
--- a/doc/api_samples/flavors/v2.61/flavors-detail-resp.json
+++ b/doc/api_samples/flavors/v2.61/flavors-detail-resp.json
@@ -162,6 +162,33 @@
                     "rel": "bookmark"
                 }
             ],
+            "name": "m1.small.sgx",
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0,
+            "description": null,
+            "extra_specs": {
+                "resources:CUSTOM_SGX_EPC_MB": "32",
+                "trait:HW_CPU_X86_SGX": "required"
+            }
+        },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "os-flavor-access:is_public": true,
+            "id": "8",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "bookmark"
+                }
+            ],
             "name": "m1.small.description",
             "ram": 2048,
             "swap": "",
diff --git a/doc/api_samples/flavors/v2.61/flavors-list-resp.json b/doc/api_samples/flavors/v2.61/flavors-list-resp.json
index f368ed5c66..a68a4f6a1c 100644
--- a/doc/api_samples/flavors/v2.61/flavors-list-resp.json
+++ b/doc/api_samples/flavors/v2.61/flavors-list-resp.json
@@ -102,6 +102,21 @@
                     "rel": "bookmark"
                 }
             ],
+            "name": "m1.small.sgx",
+            "description": null
+        },
+        {
+            "id": "8",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "bookmark"
+                }
+            ],
             "name": "m1.small.description",
             "description": "test description"
         }
diff --git a/doc/api_samples/flavors/v2.75/flavor-get-resp.json b/doc/api_samples/flavors/v2.75/flavor-get-resp.json
index 1d3c709b72..de482c3171 100644
--- a/doc/api_samples/flavors/v2.75/flavor-get-resp.json
+++ b/doc/api_samples/flavors/v2.75/flavor-get-resp.json
@@ -4,14 +4,14 @@
         "disk": 20,
         "OS-FLV-EXT-DATA:ephemeral": 0,
         "os-flavor-access:is_public": true,
-        "id": "7",
+        "id": "8",
         "links": [
             {
-                "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/7",
+                "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
                 "rel": "self"
             },
             {
-                "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/7",
+                "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
                 "rel": "bookmark"
             }
         ],
diff --git a/doc/api_samples/flavors/v2.75/flavors-detail-resp.json b/doc/api_samples/flavors/v2.75/flavors-detail-resp.json
index 35eac681e7..f3d8b4be75 100644
--- a/doc/api_samples/flavors/v2.75/flavors-detail-resp.json
+++ b/doc/api_samples/flavors/v2.75/flavors-detail-resp.json
@@ -162,6 +162,33 @@
                     "rel": "bookmark"
                 }
             ],
+            "name": "m1.small.sgx",
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0,
+            "description": null,
+            "extra_specs": {
+                "resources:CUSTOM_SGX_EPC_MB": "32",
+                "trait:HW_CPU_X86_SGX": "required"
+            }
+        },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "os-flavor-access:is_public": true,
+            "id": "8",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "bookmark"
+                }
+            ],
             "name": "m1.small.description",
             "ram": 2048,
             "swap": 0,
diff --git a/doc/api_samples/flavors/v2.75/flavors-list-resp.json b/doc/api_samples/flavors/v2.75/flavors-list-resp.json
index f368ed5c66..a68a4f6a1c 100644
--- a/doc/api_samples/flavors/v2.75/flavors-list-resp.json
+++ b/doc/api_samples/flavors/v2.75/flavors-list-resp.json
@@ -102,6 +102,21 @@
                     "rel": "bookmark"
                 }
             ],
+            "name": "m1.small.sgx",
+            "description": null
+        },
+        {
+            "id": "8",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "bookmark"
+                }
+            ],
             "name": "m1.small.description",
             "description": "test description"
         }
diff --git a/doc/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json b/doc/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json
index 9a9fe36507..3fc182e3ab 100644
--- a/doc/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json
+++ b/doc/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json
@@ -12,6 +12,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "security_group_rules": -1,
-        "security_groups": -1
+        "security_groups": -1,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json b/doc/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json
index 90c88fc450..649fa91923 100644
--- a/doc/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json
+++ b/doc/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json
@@ -11,6 +11,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "security_group_rules": -1,
-        "security_groups": -1
+        "security_groups": -1,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json b/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json
index 36ea6ee519..0c300f1d25 100644
--- a/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json
+++ b/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json b/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json
index fa649d52c9..03640f61bb 100644
--- a/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json
+++ b/doc/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json b/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json
index e8114bea92..339da3ce82 100644
--- a/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json
+++ b/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json b/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json
index 4b624e9783..c302467f71 100644
--- a/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json
+++ b/doc/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json b/doc/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json
index 714ca5923a..a486c78b3a 100644
--- a/doc/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json
+++ b/doc/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/doc/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json b/doc/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json
index 59fd38c781..b9bb7a3e1e 100644
--- a/doc/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json
+++ b/doc/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json
@@ -70,6 +70,11 @@
             "in_use": -1,
             "limit": -1,
             "reserved": -1
+        },
+        "sgx_epc": {
+            "in_use": -1,
+            "limit": -1,
+            "reserved": -1
         }
     }
 }
diff --git a/doc/api_samples/os-quota-sets-noop/quotas-show-get-resp.json b/doc/api_samples/os-quota-sets-noop/quotas-show-get-resp.json
index 714ca5923a..a486c78b3a 100644
--- a/doc/api_samples/os-quota-sets-noop/quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets-noop/quotas-show-get-resp.json
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/doc/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json b/doc/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json
index 370bd87ad1..a02a3616be 100644
--- a/doc/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json
+++ b/doc/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/doc/api_samples/os-quota-sets-noop/quotas-update-post-resp.json b/doc/api_samples/os-quota-sets-noop/quotas-update-post-resp.json
index 370bd87ad1..a02a3616be 100644
--- a/doc/api_samples/os-quota-sets-noop/quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets-noop/quotas-update-post-resp.json
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/doc/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json b/doc/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json
index 714ca5923a..a486c78b3a 100644
--- a/doc/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/doc/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json b/doc/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json
index 370bd87ad1..a02a3616be 100644
--- a/doc/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/doc/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json b/doc/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json
index 67771a0a8c..2d4fd93aad 100644
--- a/doc/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json
+++ b/doc/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/quotas-show-detail-get-resp.json b/doc/api_samples/os-quota-sets/quotas-show-detail-get-resp.json
index 65ca1bf5b6..03812967d8 100644
--- a/doc/api_samples/os-quota-sets/quotas-show-detail-get-resp.json
+++ b/doc/api_samples/os-quota-sets/quotas-show-detail-get-resp.json
@@ -70,6 +70,11 @@
             "in_use": 0,
             "limit": 10,
             "reserved": 0
+        },
+        "sgx_epc": {
+            "in_use": 0,
+            "limit": 1024,
+            "reserved": 0
         }
     }
 }
diff --git a/doc/api_samples/os-quota-sets/quotas-show-get-resp.json b/doc/api_samples/os-quota-sets/quotas-show-get-resp.json
index 67771a0a8c..2d4fd93aad 100644
--- a/doc/api_samples/os-quota-sets/quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets/quotas-show-get-resp.json
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/quotas-update-force-post-resp.json b/doc/api_samples/os-quota-sets/quotas-update-force-post-resp.json
index 2811ac02b2..0369ba76e1 100644
--- a/doc/api_samples/os-quota-sets/quotas-update-force-post-resp.json
+++ b/doc/api_samples/os-quota-sets/quotas-update-force-post-resp.json
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/quotas-update-post-resp.json b/doc/api_samples/os-quota-sets/quotas-update-post-resp.json
index 93c877aa75..9f2973bdd6 100644
--- a/doc/api_samples/os-quota-sets/quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets/quotas-update-post-resp.json
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/user-quotas-show-get-resp.json b/doc/api_samples/os-quota-sets/user-quotas-show-get-resp.json
index 67771a0a8c..2d4fd93aad 100644
--- a/doc/api_samples/os-quota-sets/user-quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets/user-quotas-show-get-resp.json
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/user-quotas-update-post-resp.json b/doc/api_samples/os-quota-sets/user-quotas-update-post-resp.json
index 92252d1a43..fc19ceeb60 100644
--- a/doc/api_samples/os-quota-sets/user-quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets/user-quotas-update-post-resp.json
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json b/doc/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json
index 1a4d5e5e15..150053d158 100644
--- a/doc/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json b/doc/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json
index fe6762f85d..939c4869a4 100644
--- a/doc/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json
@@ -50,6 +50,11 @@
             "in_use": 0,
             "limit": 10,
             "reserved": 0
+        },
+        "sgx_epc": {
+            "in_use": 0,
+            "limit": 1024,
+            "reserved": 0
         }
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json b/doc/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json
index 1a4d5e5e15..150053d158 100644
--- a/doc/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json b/doc/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json
index 935766b338..39a01c034b 100644
--- a/doc/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json b/doc/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json
index 935766b338..39a01c034b 100644
--- a/doc/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json b/doc/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json
index 1a4d5e5e15..150053d158 100644
--- a/doc/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json b/doc/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json
index 9ae2981a82..b8db9aba8a 100644
--- a/doc/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json b/doc/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json
index d5e30ecd76..a747432391 100644
--- a/doc/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json b/doc/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json
index 5cd0d46602..207a5e5174 100644
--- a/doc/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json
@@ -35,6 +35,11 @@
             "in_use": 0,
             "limit": 10,
             "reserved": 0
+        },
+        "sgx_epc": {
+            "in_use": 0,
+            "limit": 1024,
+            "reserved": 0
         }
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json b/doc/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json
index d5e30ecd76..a747432391 100644
--- a/doc/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json b/doc/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json
index 0ccff9ac45..87a57f7cbc 100644
--- a/doc/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json b/doc/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json
index 5b23fab468..eb70d6b1d9 100644
--- a/doc/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json b/doc/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json
index d5e30ecd76..a747432391 100644
--- a/doc/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/doc/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json b/doc/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json
index 82f6ab585b..f44a9aafb4 100644
--- a/doc/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json
+++ b/doc/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/accelerator/cyborg.py b/nova/accelerator/cyborg.py
index 020adc9dc9..d2671a8e20 100644
--- a/nova/accelerator/cyborg.py
+++ b/nova/accelerator/cyborg.py
@@ -106,7 +106,7 @@ def get_device_amount_of_dp_groups(dp_groups):
             if not match:
                 continue  # could be 'accel:foo=bar', skip it
             prefix, _, _ = match.groups()
-            if prefix == schedutils.ResourceRequest.XS_RES_PREFIX:
+            if prefix == utils.XS_RES_PREFIX:
                 devices_amount += int(val)
     return devices_amount
 
@@ -179,9 +179,9 @@ class _CyborgClient(object):
                 if not match:
                     continue  # could be 'accel:foo=bar', skip it
                 prefix, _ignore, name = match.groups()
-                if prefix == schedutils.ResourceRequest.XS_RES_PREFIX:
+                if prefix == utils.XS_RES_PREFIX:
                     rg.add_resource(rclass=name, amount=val)
-                elif prefix == schedutils.ResourceRequest.XS_TRAIT_PREFIX:
+                elif prefix == utils.XS_TRAIT_PREFIX:
                     rg.add_trait(trait_name=name, trait_type=val)
             request_groups.append(rg)
         return request_groups
diff --git a/nova/api/openstack/compute/flavors_extraspecs.py b/nova/api/openstack/compute/flavors_extraspecs.py
index c64b648bee..b947e590c2 100644
--- a/nova/api/openstack/compute/flavors_extraspecs.py
+++ b/nova/api/openstack/compute/flavors_extraspecs.py
@@ -34,6 +34,12 @@ class FlavorExtraSpecsController(wsgi.Controller):
         flavor = common.get_flavor(context, flavor_id)
         return dict(extra_specs=flavor.extra_specs)
 
+    def _extra_check_for_sgx_epc(self, value):
+        if isinstance(value, (six.integer_types,)) and value > 0:
+            return
+        raise exception.InvalidInput(
+            reason="%s must be a positive integer." % utils.SGX_RESOURCE_EPC)
+
     def _check_extra_specs_value(self, req, specs):
         validation_supported = api_version_request.is_supported(
             req, min_version='2.86',
@@ -46,6 +52,10 @@ class FlavorExtraSpecsController(wsgi.Controller):
             if isinstance(value, (int, float)):
                 value = str(value)
                 try:
+                    # extra check for SGX_RESOURCE_EPC, which should be a positive integer
+                    if name == utils.SGX_RESOURCE_EPC:
+                        self._extra_check_for_sgx_epc(value)
+
                     utils.check_string_length(value, 'extra_specs value',
                                               max_length=255)
                 except exception.InvalidInput as error:
diff --git a/nova/api/openstack/compute/schemas/quota_sets.py b/nova/api/openstack/compute/schemas/quota_sets.py
index 7dad6f70db..a15016a2fe 100644
--- a/nova/api/openstack/compute/schemas/quota_sets.py
+++ b/nova/api/openstack/compute/schemas/quota_sets.py
@@ -30,6 +30,7 @@ quota_resources = {
     'instances': common_quota,
     'cores': common_quota,
     'ram': common_quota,
+    'sgx_epc': common_quota,
     'floating_ips': common_quota,
     'fixed_ips': common_quota,
     'metadata_items': common_quota,
diff --git a/nova/compute/api.py b/nova/compute/api.py
index 7eb409a25e..5a4c2903ed 100644
--- a/nova/compute/api.py
+++ b/nova/compute/api.py
@@ -3878,7 +3878,8 @@ class API:
         if deltas:
             try:
                 res_deltas = {'cores': deltas.get('cores', 0),
-                              'ram': deltas.get('ram', 0)}
+                              'ram': deltas.get('ram', 0),
+                              'sgx_epc': deltas.get('sgx_epc', 0)}
                 objects.Quotas.check_deltas(context, res_deltas,
                                             project_id, user_id=user_id,
                                             check_project_id=project_id,
diff --git a/nova/compute/utils.py b/nova/compute/utils.py
index 30efc24fc7..7b2d12596d 100644
--- a/nova/compute/utils.py
+++ b/nova/compute/utils.py
@@ -1054,11 +1054,20 @@ def upsize_quota_delta(new_flavor, old_flavor):
     def _quota_delta(resource):
         return (new_flavor[resource] - old_flavor[resource])
 
+    def _quota_delta_sgx_epc():
+
+        def _value(flavor):
+            return int(flavor.get('extra_specs', {}).get(utils.SGX_RESOURCE_EPC, 0))
+
+        return _value(new_flavor) - _value(old_flavor)
+
     deltas = {}
     if _quota_delta('vcpus') > 0:
         deltas['cores'] = _quota_delta('vcpus')
     if _quota_delta('memory_mb') > 0:
         deltas['ram'] = _quota_delta('memory_mb')
+    if _quota_delta_sgx_epc() > 0:
+        deltas['sgx_epc'] = _quota_delta_sgx_epc()
 
     return deltas
 
@@ -1066,24 +1075,15 @@ def upsize_quota_delta(new_flavor, old_flavor):
 def get_headroom(quotas, usages, deltas):
     headroom = {res: quotas[res] - usages[res]
                 for res in quotas.keys()}
-    # If quota_cores is unlimited [-1]:
-    # - set cores headroom based on instances headroom:
-    if quotas.get('cores') == -1:
-        if deltas.get('cores'):
-            hc = headroom.get('instances', 1) * deltas['cores']
-            headroom['cores'] = hc / deltas.get('instances', 1)
-        else:
-            headroom['cores'] = headroom.get('instances', 1)
-
-    # If quota_ram is unlimited [-1]:
-    # - set ram headroom based on instances headroom:
-    if quotas.get('ram') == -1:
-        if deltas.get('ram'):
-            hr = headroom.get('instances', 1) * deltas['ram']
-            headroom['ram'] = hr / deltas.get('instances', 1)
-        else:
-            headroom['ram'] = headroom.get('instances', 1)
-
+    # If quota_cores, quota_ram, and quota_sgx_epc is unlimited [-1]:
+    # - set headroom of them based on instances headroom:
+    for item in ['cores', 'ram', 'sgx_epc']:
+        if quotas.get(item) == -1:
+            if deltas.get(item):
+                hc = headroom.get('instances', 1) * deltas[item]
+                headroom[item] = hc / deltas.get('instances', 1)
+            else:
+                headroom[item] = headroom.get('instances', 1)
     return headroom
 
 
@@ -1107,7 +1107,11 @@ def check_num_instances_quota(
     # Determine requested cores and ram
     req_cores = max_count * flavor.vcpus
     req_ram = max_count * flavor.memory_mb
-    deltas = {'instances': max_count, 'cores': req_cores, 'ram': req_ram}
+    sgx_epc = int(flavor.get('extra_specs', {}).get(utils.SGX_RESOURCE_EPC, 0))
+    req_sgx_epc = max_count * sgx_epc
+
+    deltas = {'instances': max_count, 'cores': req_cores,
+              'ram': req_ram, 'sgx_epc': req_sgx_epc}
 
     try:
         # NOTE(johngarbutt) when using unified limits, this is call
@@ -1126,8 +1130,9 @@ def check_num_instances_quota(
             # case of a recheck quota, for use in the over quota exception.
             req_cores = orig_num_req * flavor.vcpus
             req_ram = orig_num_req * flavor.memory_mb
+            req_sgx_epc = orig_num_req * sgx_epc
             requested = {'instances': orig_num_req, 'cores': req_cores,
-                         'ram': req_ram}
+                         'ram': req_ram, 'sgx_epc': req_sgx_epc}
             (overs, reqs, total_alloweds, useds) = get_over_quota_detail(
                 deltas, overs, quotas, requested)
             msg = "Cannot run any more instances of this type."
@@ -1147,6 +1152,8 @@ def check_num_instances_quota(
             allowed = min(allowed, headroom['cores'] // flavor.vcpus)
         if flavor.memory_mb:
             allowed = min(allowed, headroom['ram'] // flavor.memory_mb)
+        if sgx_epc:
+            allowed = min(allowed, headroom['sgx_epc'] // sgx_epc)
 
         # Convert to the appropriate exception message
         if allowed <= 0:
@@ -1162,7 +1169,7 @@ def check_num_instances_quota(
         num_instances = (str(min_count) if min_count == max_count else
             "%s-%s" % (min_count, max_count))
         requested = dict(instances=num_instances, cores=req_cores,
-                         ram=req_ram)
+                         ram=req_ram, sgx_epc=req_sgx_epc)
         (overs, reqs, total_alloweds, useds) = get_over_quota_detail(
             headroom, overs, quotas, requested)
         params = {'overs': overs, 'pid': project_id,
diff --git a/nova/conf/quota.py b/nova/conf/quota.py
index 4742249c38..9ed009de26 100644
--- a/nova/conf/quota.py
+++ b/nova/conf/quota.py
@@ -61,6 +61,17 @@ The number of megabytes of instance RAM allowed per project.
 
 Possible values:
 
+* A positive integer or 0.
+* -1 to disable the quota.
+"""),
+    cfg.IntOpt('sgx_epc',
+        min=-1,
+        default=1 * 1024,
+        help="""
+The number of megabytes of instance SGX EPC allowed per project.
+
+Possible values:
+
 * A positive integer or 0.
 * -1 to disable the quota.
 """),
diff --git a/nova/limit/placement.py b/nova/limit/placement.py
index ef67ce4860..9d65226350 100644
--- a/nova/limit/placement.py
+++ b/nova/limit/placement.py
@@ -37,6 +37,7 @@ LEGACY_LIMITS = {
     "servers": "instances",
     "class:VCPU": "cores",
     "class:MEMORY_MB": "ram",
+    "class:CUSTOM_SGX_EPC_MB": "sgx_epc",
 }
 
 
diff --git a/nova/objects/flavor.py b/nova/objects/flavor.py
index 8d3aa1d301..bd51f2edc8 100644
--- a/nova/objects/flavor.py
+++ b/nova/objects/flavor.py
@@ -135,6 +135,15 @@ def _flavor_extra_specs_del(context, flavor_id, key):
             extra_specs_key=key, flavor_id=flavor_id)
 
 
+@api_db_api.context_manager.reader
+def _get_all_extra_specs_by_key(context, key):
+    records = context.session.query(
+        api_models.FlavorExtraSpecs.flavor_id,
+        api_models.FlavorExtraSpecs.value).filter_by(key=key).all()
+
+    return {record[0]: int(record[1]) or 0 for record in records}
+
+
 @api_db_api.context_manager.writer
 def _flavor_create(context, values):
     specs = values.get('extra_specs')
@@ -656,3 +665,7 @@ class FlavorList(base.ObjectListBase, base.NovaObject):
         return base.obj_make_list(context, cls(context), objects.Flavor,
                                   api_db_flavors,
                                   expected_attrs=['extra_specs'])
+
+    @staticmethod
+    def get_all_extra_specs_by_key(context, key):
+        return _get_all_extra_specs_by_key(context, key)
diff --git a/nova/objects/instance.py b/nova/objects/instance.py
index 36172fbbe7..6dc602dac0 100644
--- a/nova/objects/instance.py
+++ b/nova/objects/instance.py
@@ -1612,7 +1612,7 @@ class InstanceList(base.ObjectListBase, base.NovaObject):
 
     @staticmethod
     @db.pick_context_manager_reader
-    def _get_counts_in_db(context, project_id, user_id=None):
+    def _get_counts_in_db(context, project_id, user_id=None, **kwargs):
         # NOTE(melwitt): Copied from nova/db/main/api.py:
         # It would be better to have vm_state not be nullable
         # but until then we test it explicitly as a workaround.
@@ -1623,10 +1623,12 @@ class InstanceList(base.ObjectListBase, base.NovaObject):
         project_query = context.session.query(
             func.count(models.Instance.id),
             func.sum(models.Instance.vcpus),
-            func.sum(models.Instance.memory_mb)).\
+            func.sum(models.Instance.memory_mb),
+            models.Instance.instance_type_id).\
             filter_by(deleted=0).\
             filter(not_soft_deleted).\
-            filter_by(project_id=project_id)
+            filter_by(project_id=project_id).\
+            group_by(models.Instance.instance_type_id)
         # NOTE(mriedem): Filter out hidden instances since there should be a
         # non-hidden version of the instance in another cell database and the
         # API will only show one of them, so we don't count the hidden copy.
@@ -1635,21 +1637,31 @@ class InstanceList(base.ObjectListBase, base.NovaObject):
                 models.Instance.hidden == sql.false(),
                 models.Instance.hidden == sql.null(),
             ))
+        project_results = project_query.all()
+
+        flavor_epc_mappings = kwargs.get("flavor_epc_mappings", {})
+
+        def _counts(db_results):
+            result = {'instances': 0, 'cores': 0, 'ram': 0, 'sgx_epc': 0}
+            for db_result in db_results:
+                num_instances = int(db_result[0] or 0)
+                result['instances'] += num_instances
+                result['cores'] += int(db_result[1] or 0)
+                result['ram'] += int(db_result[2] or 0)
+                epc_size = flavor_epc_mappings.get(
+                    db_result[3], 0) * num_instances
+                result['sgx_epc'] += epc_size
+            return result
+
+        counts = {'project': _counts(project_results)}
 
-        project_result = project_query.first()
-        fields = ('instances', 'cores', 'ram')
-        project_counts = {field: int(project_result[idx] or 0)
-                          for idx, field in enumerate(fields)}
-        counts = {'project': project_counts}
         if user_id:
-            user_result = project_query.filter_by(user_id=user_id).first()
-            user_counts = {field: int(user_result[idx] or 0)
-                           for idx, field in enumerate(fields)}
-            counts['user'] = user_counts
+            user_results = project_query.filter_by(user_id=user_id).all()
+            counts['user'] = _counts(user_results)
         return counts
 
     @base.remotable_classmethod
-    def get_counts(cls, context, project_id, user_id=None):
+    def get_counts(cls, context, project_id, user_id=None, **kwargs):
         """Get the counts of Instance objects in the database.
 
         :param context: The request context for database access
@@ -1665,7 +1677,8 @@ class InstanceList(base.ObjectListBase, base.NovaObject):
                               'cores': <count across user>,
                               'ram': <count across user>}}
         """
-        return cls._get_counts_in_db(context, project_id, user_id=user_id)
+        return cls._get_counts_in_db(
+            context, project_id, user_id=user_id, **kwargs)
 
     @staticmethod
     @db.pick_context_manager_reader
diff --git a/nova/quota.py b/nova/quota.py
index eafad4cd23..827fe10922 100644
--- a/nova/quota.py
+++ b/nova/quota.py
@@ -1331,12 +1331,17 @@ def _instances_cores_ram_count_legacy(context, project_id, user_id=None):
     else:
         nova_context.load_cells()
         cell_mappings = nova_context.CELLS
+    flavor_epc_mappings = objects.FlavorList.get_all_extra_specs_by_key(
+        context, utils.SGX_RESOURCE_EPC)
     results = nova_context.scatter_gather_cells(
         context, cell_mappings, nova_context.CELL_TIMEOUT,
-        objects.InstanceList.get_counts, project_id, user_id=user_id)
-    total_counts = {'project': {'instances': 0, 'cores': 0, 'ram': 0}}
+        objects.InstanceList.get_counts, project_id, user_id=user_id,
+        flavor_epc_mappings=flavor_epc_mappings)
+    total_counts = {
+        'project': {'instances': 0, 'cores': 0, 'ram': 0, 'sgx_epc': 0}}
     if user_id:
-        total_counts['user'] = {'instances': 0, 'cores': 0, 'ram': 0}
+        total_counts['user'] = {
+            'instances': 0, 'cores': 0, 'ram': 0, 'sgx_epc': 0}
     for result in results.values():
         if not nova_context.is_cell_failure_sentinel(result):
             for resource, count in result['project'].items():
@@ -1432,6 +1437,8 @@ QUOTAS = QuotaEngine(
             'cores', _instances_cores_ram_count, 'cores'),
         CountableResource(
             'ram', _instances_cores_ram_count, 'ram'),
+        CountableResource(
+            'sgx_epc', _instances_cores_ram_count, 'sgx_epc'),
         AbsoluteResource(
             'metadata_items', 'metadata_items'),
         AbsoluteResource(
diff --git a/nova/scheduler/client/report.py b/nova/scheduler/client/report.py
index 7c14f3d7ef..275e519acf 100644
--- a/nova/scheduler/client/report.py
+++ b/nova/scheduler/client/report.py
@@ -2603,7 +2603,9 @@ class SchedulerReportClient(object):
             # there is no usage. We can consider a missing class to be 0 usage.
             cores = _get_core_usages(data)
             ram = data['usages'].get(orc.MEMORY_MB, 0)
-            total_counts['project'] = {'cores': cores, 'ram': ram}
+            sgx_epc = data['usages'].get(utils.SGX_RESOURCE_CLASS, 0)
+            total_counts['project'] = {
+                'cores': cores, 'ram': ram, 'sgx_epc': sgx_epc}
         else:
             self._handle_usages_error_from_placement(resp, project_id)
         # If specified, second query counts across one user in the project
@@ -2615,7 +2617,9 @@ class SchedulerReportClient(object):
                 data = resp.json()
                 cores = _get_core_usages(data)
                 ram = data['usages'].get(orc.MEMORY_MB, 0)
-                total_counts['user'] = {'cores': cores, 'ram': ram}
+                sgx_epc = data['usages'].get(utils.SGX_RESOURCE_CLASS, 0)
+                total_counts['user'] = {
+                    'cores': cores, 'ram': ram, 'sgx_epc': sgx_epc}
             else:
                 self._handle_usages_error_from_placement(resp, project_id,
                                                          user_id=user_id)
diff --git a/nova/scheduler/utils.py b/nova/scheduler/utils.py
index 02c44093bd..5c8dc4c4fa 100644
--- a/nova/scheduler/utils.py
+++ b/nova/scheduler/utils.py
@@ -37,6 +37,7 @@ from nova.objects import fields as obj_fields
 from nova.objects import instance as obj_instance
 from nova import rpc
 from nova.scheduler.filters import utils as filters_utils
+from nova import utils
 from nova.virt import hardware
 
 
@@ -50,12 +51,9 @@ GroupDetails = collections.namedtuple('GroupDetails', ['hosts', 'policy',
 
 class ResourceRequest(object):
     """Presents a granular resource request via RequestGroup instances."""
-    # extra_specs-specific consts
-    XS_RES_PREFIX = 'resources'
-    XS_TRAIT_PREFIX = 'trait'
     # Regex patterns for suffixed or unsuffixed resources/trait keys
     XS_KEYPAT = re.compile(r"^(%s)([a-zA-Z0-9_-]{1,64})?:(.*)$" %
-                           '|'.join((XS_RES_PREFIX, XS_TRAIT_PREFIX)))
+                           '|'.join((utils.XS_RES_PREFIX, utils.XS_TRAIT_PREFIX)))
 
     def __init__(self):
         """Create an empty ResourceRequest
@@ -245,11 +243,11 @@ class ResourceRequest(object):
             prefix, suffix, name = match.groups()
 
             # Process "resources[$S]"
-            if prefix == self.XS_RES_PREFIX:
+            if prefix == utils.XS_RES_PREFIX:
                 self._add_resource(name, val, group=suffix)
 
             # Process "trait[$S]"
-            elif prefix == self.XS_TRAIT_PREFIX:
+            elif prefix == utils.XS_TRAIT_PREFIX:
                 self._add_trait(name, val, group=suffix)
 
     def _process_image_meta(self, image):
diff --git a/nova/tests/fixtures/nova.py b/nova/tests/fixtures/nova.py
index ae2e7d70ef..d848fa9168 100644
--- a/nova/tests/fixtures/nova.py
+++ b/nova/tests/fixtures/nova.py
@@ -731,6 +731,10 @@ class DefaultFlavorsFixture(fixtures.Fixture):
         extra_specs = {
             "hw:numa_nodes": "1"
         }
+        sgx_extra_specs = {
+            utils.SGX_RESOURCE_EPC: '32',
+            utils.SGX_TRAIT: 'required'
+        }
         default_flavors = [
             objects.Flavor(context=ctxt, memory_mb=512, vcpus=1,
                            root_gb=1, flavorid='1', name='m1.tiny',
@@ -738,6 +742,9 @@ class DefaultFlavorsFixture(fixtures.Fixture):
             objects.Flavor(context=ctxt, memory_mb=2048, vcpus=1,
                            root_gb=20, flavorid='2', name='m1.small',
                            **defaults),
+            objects.Flavor(context=ctxt, memory_mb=2048, vcpus=1,
+                           root_gb=20, flavorid='7', name='m1.small.sgx',
+                           extra_specs=sgx_extra_specs, **defaults),
             objects.Flavor(context=ctxt, memory_mb=4096, vcpus=2,
                            root_gb=40, flavorid='3', name='m1.medium',
                            **defaults),
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-detail-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-detail-resp.json.tpl
index 636ae43239..254d88dde5 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-detail-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-detail-resp.json.tpl
@@ -131,6 +131,27 @@
             "swap": "",
             "vcpus": 1,
             "rxtx_factor": 1.0
+        },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "id": "7",
+            "links": [
+                {   "href": "%(versioned_compute_endpoint)s/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "%(compute_endpoint)s/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx",
+            "os-flavor-access:is_public": true,
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0
         }
     ]
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-list-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-list-resp.json.tpl
index 54de90e4c7..3cfd58cd6c 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-list-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/flavors-list-resp.json.tpl
@@ -83,6 +83,20 @@
                 }
             ],
             "name": "m1.tiny.specs"
+        },
+        {
+            "id": "7",
+            "links": [
+                {
+                    "href": "%(versioned_compute_endpoint)s/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "%(compute_endpoint)s/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx"
         }
     ]
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-detail-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-detail-resp.json.tpl
index 164520a63d..a487032d44 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-detail-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-detail-resp.json.tpl
@@ -138,6 +138,28 @@
             "rxtx_factor": 1.0,
             "description": null
         },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "id": "7",
+            "links": [
+                {   "href": "%(versioned_compute_endpoint)s/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "%(compute_endpoint)s/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx",
+            "os-flavor-access:is_public": true,
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0,
+            "description": null
+        },
         {
             "OS-FLV-DISABLED:disabled": false,
             "disk": 20,
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-list-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-list-resp.json.tpl
index 79a23e8760..34c752c496 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-list-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.55/flavors-list-resp.json.tpl
@@ -90,6 +90,21 @@
             "name": "m1.tiny.specs",
             "description": null
         },
+        {
+            "id": "7",
+            "links": [
+                {
+                    "href": "%(versioned_compute_endpoint)s/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "%(compute_endpoint)s/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx",
+            "description": null
+        },
         {
             "id": "%(flavorid)s",
             "links": [
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-detail-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-detail-resp.json.tpl
index 32b7ee85f5..c68f0fcdb3 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-detail-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-detail-resp.json.tpl
@@ -146,6 +146,32 @@
                 "hw:numa_nodes": "1"
             }
         },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "id": "7",
+            "links": [
+                {   "href": "%(versioned_compute_endpoint)s/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "%(compute_endpoint)s/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx",
+            "os-flavor-access:is_public": true,
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0,
+            "description": null,
+            "extra_specs": {
+                "resources:CUSTOM_SGX_EPC_MB": "32",
+                "trait:HW_CPU_X86_SGX": "required"
+            }
+        },
         {
             "OS-FLV-DISABLED:disabled": false,
             "disk": 20,
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-list-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-list-resp.json.tpl
index 79a23e8760..34c752c496 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-list-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.61/flavors-list-resp.json.tpl
@@ -90,6 +90,21 @@
             "name": "m1.tiny.specs",
             "description": null
         },
+        {
+            "id": "7",
+            "links": [
+                {
+                    "href": "%(versioned_compute_endpoint)s/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "%(compute_endpoint)s/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx",
+            "description": null
+        },
         {
             "id": "%(flavorid)s",
             "links": [
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-detail-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-detail-resp.json.tpl
index 9a03bee772..344d7dc0d6 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-detail-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-detail-resp.json.tpl
@@ -146,6 +146,32 @@
                 "hw:numa_nodes": "1"
             }
         },
+        {
+            "OS-FLV-DISABLED:disabled": false,
+            "disk": 20,
+            "OS-FLV-EXT-DATA:ephemeral": 0,
+            "id": "7",
+            "links": [
+                {   "href": "%(versioned_compute_endpoint)s/flavors/7",
+                    "rel": "self"
+                },
+                {
+                    "href": "%(compute_endpoint)s/flavors/7",
+                    "rel": "bookmark"
+                }
+            ],
+            "name": "m1.small.sgx",
+            "os-flavor-access:is_public": true,
+            "ram": 2048,
+            "swap": "",
+            "vcpus": 1,
+            "rxtx_factor": 1.0,
+            "description": null,
+            "extra_specs": {
+                "resources:CUSTOM_SGX_EPC_MB": "32",
+                "trait:HW_CPU_X86_SGX": "required"
+            }
+        },
         {
             "OS-FLV-DISABLED:disabled": false,
             "disk": 20,
diff --git a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-list-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-list-resp.json.tpl
index 1c416099c4..c2d6d99b26 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-list-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/flavors/v2.75/flavors-list-resp.json.tpl
@@ -91,7 +91,7 @@
             "name": "m1.tiny.specs"
         },
         {
-            "description": "test description",
+            "description": null,
             "id": "7",
             "links": [
                 {
@@ -103,6 +103,21 @@
                     "rel": "bookmark"
                 }
             ],
+            "name": "m1.small.sgx"
+        },
+        {
+            "description": "test description",
+            "id": "8",
+            "links": [
+                {
+                    "href": "http://openstack.example.com/v2.1/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "self"
+                },
+                {
+                    "href": "http://openstack.example.com/6f70656e737461636b20342065766572/flavors/8",
+                    "rel": "bookmark"
+                }
+            ],
             "name": "m1.small.description"
         }
     ]
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json.tpl
index 05deb6057e..a26876311a 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-show-get-resp.json.tpl
@@ -12,6 +12,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "security_group_rules": -1,
-        "security_groups": -1
+        "security_groups": -1,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json.tpl
index a0a0150b58..6c10d48447 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/quota-classes-update-post-resp.json.tpl
@@ -11,6 +11,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "security_group_rules": -1,
-        "security_groups": -1
+        "security_groups": -1,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json.tpl
index 2b5c99e780..0e4ab0566e 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-show-get-resp.json.tpl
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-req.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-req.json.tpl
index ecfb85588b..141ac591c1 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-req.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-req.json.tpl
@@ -9,6 +9,7 @@
         "injected_file_path_bytes": 255,
         "key_pairs": 100,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json.tpl
index fa649d52c9..03640f61bb 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.50/quota-classes-update-post-resp.json.tpl
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json.tpl
index c6601dd93f..3ca2b4bf4d 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-show-get-resp.json.tpl
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-req.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-req.json.tpl
index c722307eea..6cb035992d 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-req.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-req.json.tpl
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "key_pairs": 100,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json.tpl
index 4b624e9783..c302467f71 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-class-sets/v2.57/quota-classes-update-post-resp.json.tpl
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json.tpl
index 5922059a86..81a96a0c81 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-defaults-get-resp.json.tpl
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": -1,
-        "server_group_members": -1
+        "server_group_members": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json.tpl
index 59fd38c781..b9bb7a3e1e 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-detail-get-resp.json.tpl
@@ -70,6 +70,11 @@
             "in_use": -1,
             "limit": -1,
             "reserved": -1
+        },
+        "sgx_epc": {
+            "in_use": -1,
+            "limit": -1,
+            "reserved": -1
         }
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-get-resp.json.tpl
index 714ca5923a..a486c78b3a 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-show-get-resp.json.tpl
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json.tpl
index 370bd87ad1..a02a3616be 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-force-post-resp.json.tpl
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-post-resp.json.tpl
index 370bd87ad1..a02a3616be 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/quotas-update-post-resp.json.tpl
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json.tpl
index 714ca5923a..a486c78b3a 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-show-get-resp.json.tpl
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json.tpl
index 370bd87ad1..a02a3616be 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets-noop/user-quotas-update-post-resp.json.tpl
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_group_members": -1,
-        "server_groups": -1
+        "server_groups": -1,
+        "sgx_epc": -1
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json.tpl
index bb596ec5fb..3f66aee497 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-defaults-get-resp.json.tpl
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-detail-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-detail-get-resp.json.tpl
index 65ca1bf5b6..03812967d8 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-detail-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-detail-get-resp.json.tpl
@@ -70,6 +70,11 @@
             "in_use": 0,
             "limit": 10,
             "reserved": 0
+        },
+        "sgx_epc": {
+            "in_use": 0,
+            "limit": 1024,
+            "reserved": 0
         }
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-get-resp.json.tpl
index 67771a0a8c..2d4fd93aad 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-show-get-resp.json.tpl
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-force-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-force-post-resp.json.tpl
index 2811ac02b2..0369ba76e1 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-force-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-force-post-resp.json.tpl
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-post-resp.json.tpl
index c81bbc6e0a..4a663f2514 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/quotas-update-post-resp.json.tpl
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-show-get-resp.json.tpl
index bb596ec5fb..3f66aee497 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-show-get-resp.json.tpl
@@ -14,6 +14,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-update-post-resp.json.tpl
index 78d4dc04f8..34e50c44cb 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/user-quotas-update-post-resp.json.tpl
@@ -13,6 +13,7 @@
         "security_group_rules": -1,
         "security_groups": -1,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json.tpl
index 1a4d5e5e15..150053d158 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-defaults-get-resp.json.tpl
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json.tpl
index fe6762f85d..939c4869a4 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-detail-get-resp.json.tpl
@@ -50,6 +50,11 @@
             "in_use": 0,
             "limit": 10,
             "reserved": 0
+        },
+        "sgx_epc": {
+            "in_use": 0,
+            "limit": 1024,
+            "reserved": 0
         }
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json.tpl
index 1a4d5e5e15..150053d158 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-show-get-resp.json.tpl
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json.tpl
index 935766b338..39a01c034b 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-force-post-resp.json.tpl
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json.tpl
index 935766b338..39a01c034b 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/quotas-update-post-resp.json.tpl
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json.tpl
index 1a4d5e5e15..150053d158 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-show-get-resp.json.tpl
@@ -10,6 +10,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json.tpl
index 9ae2981a82..b8db9aba8a 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.36/user-quotas-update-post-resp.json.tpl
@@ -9,6 +9,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json.tpl
index d5e30ecd76..a747432391 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-defaults-get-resp.json.tpl
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json.tpl
index 5cd0d46602..207a5e5174 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-detail-get-resp.json.tpl
@@ -35,6 +35,11 @@
             "in_use": 0,
             "limit": 10,
             "reserved": 0
+        },
+        "sgx_epc": {
+            "in_use": 0,
+            "limit": 1024,
+            "reserved": 0
         }
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json.tpl
index d5e30ecd76..a747432391 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-show-get-resp.json.tpl
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json.tpl
index 0ccff9ac45..87a57f7cbc 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-force-post-resp.json.tpl
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json.tpl
index 5b23fab468..eb70d6b1d9 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/quotas-update-post-resp.json.tpl
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json.tpl
index d5e30ecd76..a747432391 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-show-get-resp.json.tpl
@@ -7,6 +7,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json.tpl b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json.tpl
index 82f6ab585b..f44a9aafb4 100644
--- a/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json.tpl
+++ b/nova/tests/functional/api_sample_tests/api_samples/os-quota-sets/v2.57/user-quotas-update-post-resp.json.tpl
@@ -6,6 +6,7 @@
         "metadata_items": 128,
         "ram": 51200,
         "server_groups": 10,
-        "server_group_members": 10
+        "server_group_members": 10,
+        "sgx_epc": 1024
     }
 }
diff --git a/nova/tests/functional/test_nova_manage.py b/nova/tests/functional/test_nova_manage.py
index e2aed2c205..826e0546cc 100644
--- a/nova/tests/functional/test_nova_manage.py
+++ b/nova/tests/functional/test_nova_manage.py
@@ -2455,15 +2455,15 @@ class TestNovaManageLimits(test.TestCase):
         # Verify that limit create attempts for other resources were attempted
         # after an unexpected error.
         #
-        # There are 10 default limit values in the config options: instances,
-        # cores, ram, metadata_items, injected_files,
+        # There are 11 default limit values in the config options: instances,
+        # cores, ram, sgx_epc, metadata_items, injected_files,
         # injected_file_content_bytes, injected_file_path_length, key_pairs,
         # server_groups, and server_group_members.
         #
         # And there is 1 default limit value automatically generated for PCPU
         # based on 'cores'.
         self.assertEqual(
-            11, mock_sdk.return_value.create_registered_limit.call_count)
+            12, mock_sdk.return_value.create_registered_limit.call_count)
 
         # We expect that we attempted to create 4 project limits:
         # class:MEMORY_MB, servers, and class:VCPU = 3 + special case
@@ -2485,13 +2485,13 @@ class TestNovaManageLimits(test.TestCase):
         self.cli.migrate_to_unified_limits(
             project_id=uuids.project, verbose=True)
 
-        # There are 10 default limit values in the config options +
-        # 1 special case for PCPU which will be added based on VCPU = 11.
+        # There are 11 default limit values in the config options +
+        # 1 special case for PCPU which will be added based on VCPU = 12.
         # Because a limit for 'servers' already exists, we should have only
-        # created 10.
+        # created 11.
         mock_sdk = self.ul_api.mock_sdk_adapter
         self.assertEqual(
-            10, mock_sdk.create_registered_limit.call_count)
+            11, mock_sdk.create_registered_limit.call_count)
 
         # There already exists a project limit for 'class:VCPU', so we should
         # have created only 2 project limits. One for 'servers' and one for
@@ -2510,6 +2510,7 @@ class TestNovaManageLimits(test.TestCase):
         self.flags(key_pairs=50, group='quota')
         self.flags(server_groups=7, group='quota')
         self.flags(server_group_members=12, group='quota')
+        self.flags(sgx_epc=1024, group='quota')
         # Create a couple of defaults via the 'default' quota class. These take
         # precedence over the config option values.
         objects.Quotas.create_class(self.ctxt, 'default', 'cores', 10)
@@ -2544,15 +2545,16 @@ class TestNovaManageLimits(test.TestCase):
         self.cli.migrate_to_unified_limits(
             project_id=uuids.project, verbose=True)
 
-        # There are 10 default limit values in the config options +
-        # 1 special case for PCPU which will be added based on VCPU = 11.
+        # There are 11 default limit values in the config options +
+        # 1 special case for PCPU which will be added based on VCPU = 12.
         #
-        # There should be 11 registered (default) limits now.
+        # There should be 12 registered (default) limits now.
         expected_registered_limits = {
             'servers': 5,
             'class:VCPU': 10,
             'class:PCPU': 10,
             'class:MEMORY_MB': 4096,
+            'class:CUSTOM_SGX_EPC_MB': 1024,
             'server_metadata_items': 64,
             'server_injected_files': 3,
             'server_injected_file_content_bytes': 9 * 1024,
@@ -2563,7 +2565,7 @@ class TestNovaManageLimits(test.TestCase):
         }
 
         registered_limits = self.ul_api.registered_limits()
-        self.assertEqual(11, len(registered_limits))
+        self.assertEqual(12, len(registered_limits))
         for rl in registered_limits:
             self.assertEqual(
                 expected_registered_limits[rl.resource_name], rl.default_limit)
@@ -2595,7 +2597,7 @@ class TestNovaManageLimits(test.TestCase):
 
         region_registered_limits = self.ul_api.registered_limits(
             region_id=uuids.region)
-        self.assertEqual(11, len(region_registered_limits))
+        self.assertEqual(12, len(region_registered_limits))
         for rl in region_registered_limits:
             self.assertEqual(
                 expected_registered_limits[rl.resource_name], rl.default_limit)
diff --git a/nova/tests/unit/api/openstack/compute/test_quota_classes.py b/nova/tests/unit/api/openstack/compute/test_quota_classes.py
index 463f8344c0..f11bc2d726 100644
--- a/nova/tests/unit/api/openstack/compute/test_quota_classes.py
+++ b/nova/tests/unit/api/openstack/compute/test_quota_classes.py
@@ -39,7 +39,8 @@ class QuotaClassSetsTestV21(test.TestCase):
                        'injected_file_content_bytes': 10240,
                        'security_groups': -1,
                        'security_group_rules': -1, 'key_pairs': 100,
-                       'injected_file_path_bytes': 255}
+                       'injected_file_path_bytes': 255,
+                       'sgx_epc': 1024}
     filtered_quotas = None
 
     def quota_set(self, class_name):
@@ -139,7 +140,8 @@ class QuotaClassSetsTestV250(QuotaClassSetsTestV21):
                        'key_pairs': 100,
                        'injected_file_path_bytes': 255,
                        'server_groups': 10,
-                       'server_group_members': 10}
+                       'server_group_members': 10,
+                       'sgx_epc': 1024}
     filtered_quotas = quota_classes_v21.FILTERED_QUOTAS_2_50
 
     def _check_filtered_extended_quota(self, quota_set):
@@ -190,7 +192,8 @@ class NoopQuotaClassesTest(test.NoDBTestCase):
                 'metadata_items': -1,
                 'ram': -1,
                 'security_group_rules': -1,
-                'security_groups': -1
+                'security_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -208,6 +211,7 @@ class NoopQuotaClassesTest(test.NoDBTestCase):
                 'ram': -1,
                 'server_group_members': -1,
                 'server_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -237,7 +241,8 @@ class NoopQuotaClassesTest(test.NoDBTestCase):
                 'metadata_items': -1,
                 'ram': -1,
                 'security_group_rules': -1,
-                'security_groups': -1
+                'security_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -258,6 +263,7 @@ class NoopQuotaClassesTest(test.NoDBTestCase):
                 'ram': -1,
                 'server_group_members': -1,
                 'server_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -302,6 +308,7 @@ class UnifiedLimitsQuotaClassesTest(NoopQuotaClassesTest):
                 'metadata_items': 128,
                 'security_group_rules': -1,
                 'security_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -321,6 +328,7 @@ class UnifiedLimitsQuotaClassesTest(NoopQuotaClassesTest):
                 'metadata_items': 128,
                 'server_group_members': 10,
                 'server_groups': 12,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -352,7 +360,8 @@ class UnifiedLimitsQuotaClassesTest(NoopQuotaClassesTest):
                 'metadata_items': 128,
                 'ram': 3,
                 'security_group_rules': -1,
-                'security_groups': -1
+                'security_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -375,6 +384,7 @@ class UnifiedLimitsQuotaClassesTest(NoopQuotaClassesTest):
                 'metadata_items': 128,
                 'server_group_members': 10,
                 'server_groups': 12,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
diff --git a/nova/tests/unit/api/openstack/compute/test_quotas.py b/nova/tests/unit/api/openstack/compute/test_quotas.py
index 0a1bbd08d8..86904290bf 100644
--- a/nova/tests/unit/api/openstack/compute/test_quotas.py
+++ b/nova/tests/unit/api/openstack/compute/test_quotas.py
@@ -37,7 +37,8 @@ def quota_set(id, include_server_group_quotas=True):
            'instances': 10, 'injected_files': 5, 'cores': 20,
            'injected_file_content_bytes': 10240,
            'security_groups': -1, 'security_group_rules': -1,
-           'key_pairs': 100, 'injected_file_path_bytes': 255}}
+           'key_pairs': 100, 'injected_file_path_bytes': 255,
+           'sgx_epc': 1024}}
     if include_server_group_quotas:
         res['quota_set']['server_groups'] = 10
         res['quota_set']['server_group_members'] = 10
@@ -72,6 +73,7 @@ class QuotaSetsTestV21(BaseQuotaSetsTest):
             'instances': 10,
             'cores': 20,
             'ram': 51200,
+            'sgx_epc': 1024,
             'floating_ips': -1,
             'fixed_ips': -1,
             'metadata_items': 128,
@@ -102,6 +104,7 @@ class QuotaSetsTestV21(BaseQuotaSetsTest):
         self.assertEqual(qs['instances'], 10)
         self.assertEqual(qs['cores'], 20)
         self.assertEqual(qs['ram'], 51200)
+        self.assertEqual(qs['sgx_epc'], 1024)
         self.assertEqual(qs['floating_ips'], -1)
         self.assertEqual(qs['fixed_ips'], -1)
         self.assertEqual(qs['metadata_items'], 128)
@@ -185,7 +188,8 @@ class QuotaSetsTestV21(BaseQuotaSetsTest):
     def test_quotas_update(self):
         self.default_quotas.update({
             'instances': 50,
-            'cores': 50
+            'cores': 50,
+            'sgx_epc': 32
         })
         body = {'quota_set': self.default_quotas}
         req = self._get_http_request()
@@ -225,7 +229,8 @@ class QuotaSetsTestV21(BaseQuotaSetsTest):
                               'injected_file_path_bytes': 0,
                               'security_groups': -1,
                               'security_group_rules': -1,
-                              'key_pairs': 100, 'fixed_ips': -1}}
+                              'key_pairs': 100, 'fixed_ips': -1,
+                              'sgx_epc': 0}}
         if self.include_server_group_quotas:
             body['quota_set']['server_groups'] = 10
             body['quota_set']['server_group_members'] = 10
@@ -343,7 +348,10 @@ class ExtendedQuotasTestV21(BaseQuotaSetsTest):
                              'reserved': 5},
                    'instances': {'limit': 100,
                                  'in_use': 0,
-                                 'reserved': 0}}
+                                 'reserved': 0},
+                   'sgx_epc': {'limit': 64,
+                               'in_use': 16,
+                               'reserved': 16}}
 
     def _setup_controller(self):
         self.controller = self.plugin.QuotaSetsController()
@@ -365,6 +373,9 @@ class ExtendedQuotasTestV21(BaseQuotaSetsTest):
             'instances': {'minimum': self.fake_quotas['instances']['in_use'] +
                                      self.fake_quotas['instances']['reserved'],
                           'maximum': -1},
+            'sgx_epc': {'minimum': self.fake_quotas['sgx_epc']['in_use'] +
+                                   self.fake_quotas['sgx_epc']['reserved'],
+                        'maximum': -1}
         }
 
     def _get_http_request(self, url=''):
@@ -450,7 +461,8 @@ class UserQuotasTestV21(BaseQuotaSetsTest):
                               'injected_file_path_bytes': 255,
                               'security_groups': -1,
                               'security_group_rules': -1,
-                              'key_pairs': 100}}
+                              'key_pairs': 100,
+                              'sgx_epc': 64}}
         if self.include_server_group_quotas:
             body['quota_set']['server_groups'] = 10
             body['quota_set']['server_group_members'] = 10
@@ -699,6 +711,7 @@ class NoopQuotaSetsTest(test.NoDBTestCase):
                 'security_groups': -1,
                 'server_group_members': -1,
                 'server_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -715,7 +728,8 @@ class NoopQuotaSetsTest(test.NoDBTestCase):
                 'metadata_items': -1,
                 'ram': -1,
                 'server_group_members': -1,
-                'server_groups': -1}}
+                'server_groups': -1,
+                'sgx_epc': -1}}
         self.assertEqual(expected_response, response)
 
     def test_detail_v21(self):
@@ -739,6 +753,7 @@ class NoopQuotaSetsTest(test.NoDBTestCase):
                 'security_groups': self.expected_detail,
                 'server_group_members': self.expected_detail,
                 'server_groups': self.expected_detail,
+                'sgx_epc': self.expected_detail,
             }
         }
         self.assertEqual(expected_response, response)
@@ -763,6 +778,7 @@ class NoopQuotaSetsTest(test.NoDBTestCase):
                 'security_groups': self.expected_detail,
                 'server_group_members': self.expected_detail,
                 'server_groups': self.expected_detail,
+                'sgx_epc': self.expected_detail,
             }
         }
         self.assertEqual(expected_response, response)
@@ -795,6 +811,7 @@ class NoopQuotaSetsTest(test.NoDBTestCase):
                 'security_groups': -1,
                 'server_group_members': -1,
                 'server_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -823,6 +840,7 @@ class NoopQuotaSetsTest(test.NoDBTestCase):
                 'security_groups': -1,
                 'server_group_members': -1,
                 'server_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -850,6 +868,7 @@ class NoopQuotaSetsTest(test.NoDBTestCase):
                 'security_groups': -1,
                 'server_group_members': -1,
                 'server_groups': -1,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -908,6 +927,7 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                 'security_groups': -1,
                 'server_group_members': 10,
                 'server_groups': 12,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -926,7 +946,8 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                 'metadata_items': 128,
                 'ram': 3,
                 'server_group_members': 10,
-                'server_groups': 12}}
+                'server_groups': 12,
+                'sgx_epc': -1}}
         self.assertEqual(expected_response, response)
 
     @mock.patch.object(placement_limit, "get_legacy_counts")
@@ -965,6 +986,8 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                     'in_use': 0, 'limit': 10, 'reserved': 0},
                 'server_groups': {
                     'in_use': 9, 'limit': 12, 'reserved': 0},
+                'sgx_epc': {
+                    'in_use': 0, 'limit': -1, 'reserved': 0},
             }
         }
         self.assertEqual(expected_response, response)
@@ -1005,6 +1028,8 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                     'in_use': 0, 'limit': 10, 'reserved': 0},
                 'server_groups': {
                     'in_use': 9, 'limit': 12, 'reserved': 0},
+                'sgx_epc': {
+                    'in_use': 0, 'limit': -1, 'reserved': 0},
             }
         }
         self.assertEqual(expected_response, response)
@@ -1033,6 +1058,7 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                 'security_groups': -1,
                 'server_group_members': 10,
                 'server_groups': 12,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -1061,6 +1087,7 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                 'security_groups': -1,
                 'server_group_members': 10,
                 'server_groups': 12,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -1088,6 +1115,7 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                 'security_groups': -1,
                 'server_group_members': 10,
                 'server_groups': 12,
+                'sgx_epc': -1,
             }
         }
         self.assertEqual(expected_response, response)
@@ -1121,6 +1149,7 @@ class UnifiedLimitsQuotaSetsTest(NoopQuotaSetsTest):
                 'security_groups': -1,
                 'server_group_members': 2,
                 'server_groups': 3,
+                'sgx_epc': 0,
             }
         }
         self.assertEqual(expected_response, response)
diff --git a/nova/tests/unit/compute/test_api.py b/nova/tests/unit/compute/test_api.py
index c2b1f876cd..85adffd463 100644
--- a/nova/tests/unit/compute/test_api.py
+++ b/nova/tests/unit/compute/test_api.py
@@ -2072,10 +2072,10 @@ class _ComputeAPIUnitTestMixIn(object):
             project_id, user_id = quotas_obj.ids_from_instance(self.context,
                                                                fake_inst)
             if flavor_id_passed:
-                mock_upsize.return_value = {'cores': 0, 'ram': 0}
+                mock_upsize.return_value = {'cores': 0, 'ram': 0, 'sgx_epc': 0}
 
                 proj_count = {'instances': 1, 'cores': current_flavor.vcpus,
-                              'ram': current_flavor.memory_mb}
+                              'ram': current_flavor.memory_mb, 'sgx_epc': 0}
                 user_count = proj_count.copy()
                 mock_count.return_value = {'project': proj_count,
                                            'user': user_count}
@@ -2180,7 +2180,7 @@ class _ComputeAPIUnitTestMixIn(object):
                 # The current and new flavor have the same cores/ram
                 req_cores = current_flavor.vcpus
                 req_ram = current_flavor.memory_mb
-                values = {'cores': req_cores, 'ram': req_ram}
+                values = {'cores': req_cores, 'ram': req_ram, 'sgx_epc': 0}
                 mock_limit.assert_called_once_with(
                     self.context, user_values=values, project_values=values,
                     project_id=project_id, user_id=user_id)
@@ -2244,7 +2244,8 @@ class _ComputeAPIUnitTestMixIn(object):
     def test_resize_quota_check(self, mock_check, mock_count, mock_get):
         self.flags(cores=1, group='quota')
         self.flags(ram=2048, group='quota')
-        proj_count = {'instances': 1, 'cores': 1, 'ram': 1024}
+        self.flags(sgx_epc=1024, group='quota')
+        proj_count = {'instances': 1, 'cores': 1, 'ram': 1024, 'sgx_epc': 0}
         user_count = proj_count.copy()
         mock_count.return_value = {'project': proj_count,
                                    'user': user_count}
@@ -2257,16 +2258,16 @@ class _ComputeAPIUnitTestMixIn(object):
                                     root_gb=10, disabled=False, extra_specs={})
         mock_get.return_value = new_flavor
         mock_check.side_effect = exception.OverQuota(
-                overs=['ram'], quotas={'cores': 1, 'ram': 2048},
-                usages={'instances': 1, 'cores': 1, 'ram': 2048},
-                headroom={'ram': 2048})
+            overs=['ram'], quotas={'cores': 1, 'ram': 2048, 'sgx_epc': 1024},
+            usages={'instances': 1, 'cores': 1, 'ram': 2048, 'sgx_epc': 0},
+            headroom={'ram': 2048})
 
         self.assertRaises(exception.TooManyInstances, self.compute_api.resize,
                           self.context, fake_inst, flavor_id='new')
         mock_check.assert_called_once_with(
                 self.context,
-                user_values={'cores': 1, 'ram': 2560},
-                project_values={'cores': 1, 'ram': 2560},
+                user_values={'cores': 1, 'ram': 2560, 'sgx_epc': 0},
+                project_values={'cores': 1, 'ram': 2560, 'sgx_epc': 0},
                 project_id=fake_inst.project_id, user_id=fake_inst.user_id)
 
     @mock.patch('nova.servicegroup.api.API.service_is_up',
@@ -2476,18 +2477,19 @@ class _ComputeAPIUnitTestMixIn(object):
         mock_upsize.return_value = deltas
         quotas = {'cores': 0}
         overs = ['cores']
-        over_quota_args = dict(quotas=quotas,
-                               usages={'instances': 1, 'cores': 1, 'ram': 512},
-                               overs=overs)
+        over_quota_args = dict(
+            quotas=quotas,
+            usages={'instances': 1, 'cores': 1, 'ram': 512, 'sgx_epc': 0},
+            overs=overs)
 
         proj_count = {'instances': 1, 'cores': fake_inst.flavor.vcpus,
-                      'ram': fake_inst.flavor.memory_mb}
+                      'ram': fake_inst.flavor.memory_mb, 'sgx_epc': 0}
         user_count = proj_count.copy()
         mock_count.return_value = {'project': proj_count, 'user': user_count}
 
         req_cores = fake_inst.flavor.vcpus
         req_ram = fake_inst.flavor.memory_mb
-        values = {'cores': req_cores, 'ram': req_ram}
+        values = {'cores': req_cores, 'ram': req_ram, 'sgx_epc': 0}
         mock_limit.side_effect = exception.OverQuota(**over_quota_args)
 
         self.assertRaises(exception.TooManyInstances,
@@ -4591,7 +4593,7 @@ class _ComputeAPIUnitTestMixIn(object):
         admin_context = context.RequestContext('admin_user',
                                                'admin_project',
                                                True)
-        proj_count = {'instances': 1, 'cores': 1, 'ram': 512}
+        proj_count = {'instances': 1, 'cores': 1, 'ram': 512, 'sgx_epc': 64}
         user_count = proj_count.copy()
         quota_count.return_value = {'project': proj_count, 'user': user_count}
         instance = self._create_instance_obj()
@@ -4614,10 +4616,12 @@ class _ComputeAPIUnitTestMixIn(object):
             admin_context,
             user_values={'instances': 2,
                          'cores': 1 + instance.flavor.vcpus,
-                         'ram': 512 + instance.flavor.memory_mb},
+                         'ram': 512 + instance.flavor.memory_mb,
+                         'sgx_epc': 64},
             project_values={'instances': 2,
                             'cores': 1 + instance.flavor.vcpus,
-                            'ram': 512 + instance.flavor.memory_mb},
+                            'ram': 512 + instance.flavor.memory_mb,
+                            'sgx_epc': 64},
             project_id=instance.project_id)
         update_qfd.assert_called_once_with(admin_context, instance.uuid, False)
 
@@ -4633,7 +4637,7 @@ class _ComputeAPIUnitTestMixIn(object):
     def test_restore_by_instance_owner(self, update_qfd, action_start,
                                        instance_save,
                                        quota_check, quota_count):
-        proj_count = {'instances': 1, 'cores': 1, 'ram': 512}
+        proj_count = {'instances': 1, 'cores': 1, 'ram': 512, 'sgx_epc': 0}
         user_count = proj_count.copy()
         quota_count.return_value = {'project': proj_count, 'user': user_count}
         instance = self._create_instance_obj()
@@ -4657,10 +4661,12 @@ class _ComputeAPIUnitTestMixIn(object):
             self.context,
             user_values={'instances': 2,
                          'cores': 1 + instance.flavor.vcpus,
-                         'ram': 512 + instance.flavor.memory_mb},
+                         'ram': 512 + instance.flavor.memory_mb,
+                         'sgx_epc': 0},
             project_values={'instances': 2,
                             'cores': 1 + instance.flavor.vcpus,
-                            'ram': 512 + instance.flavor.memory_mb},
+                            'ram': 512 + instance.flavor.memory_mb,
+                            'sgx_epc': 0},
             project_id=instance.project_id)
         update_qfd.assert_called_once_with(self.context, instance.uuid, False)
 
diff --git a/nova/tests/unit/compute/test_compute.py b/nova/tests/unit/compute/test_compute.py
index f63082d951..6de596667b 100644
--- a/nova/tests/unit/compute/test_compute.py
+++ b/nova/tests/unit/compute/test_compute.py
@@ -9098,7 +9098,8 @@ class ComputeAPITestCase(BaseTestCase):
         self.assertEqual(2, check_deltas_mock.call_count)
         call1 = mock.call(self.context, {'instances': 1,
                                          'cores': self.default_flavor.vcpus,
-                                         'ram': self.default_flavor.memory_mb},
+                                         'ram': self.default_flavor.memory_mb,
+                                         'sgx_epc': 0},
                           self.context.project_id,
                           user_id=None,
                           check_project_id=self.context.project_id,
diff --git a/nova/tests/unit/compute/test_utils.py b/nova/tests/unit/compute/test_utils.py
index dd10ecd7df..14d169568e 100644
--- a/nova/tests/unit/compute/test_utils.py
+++ b/nova/tests/unit/compute/test_utils.py
@@ -44,6 +44,7 @@ from nova import rpc
 from nova.scheduler.client import report
 from nova import test
 from nova.tests import fixtures
+from nova import utils
 from nova.tests.unit import fake_block_device
 from nova.tests.unit import fake_crypto
 from nova.tests.unit import fake_instance
@@ -1316,10 +1317,14 @@ class ComputeUtilsQuotaTestCase(test.TestCase):
     def test_upsize_quota_delta(self):
         old_flavor = objects.Flavor.get_by_name(self.context, 'm1.tiny')
         new_flavor = objects.Flavor.get_by_name(self.context, 'm1.medium')
+        old_flavor.extra_specs = {utils.SGX_RESOURCE_EPC: '32'}
+        new_flavor.extra_specs = {utils.SGX_RESOURCE_EPC: '64'}
 
         expected_deltas = {
             'cores': new_flavor['vcpus'] - old_flavor['vcpus'],
-            'ram': new_flavor['memory_mb'] - old_flavor['memory_mb']
+            'ram': new_flavor['memory_mb'] - old_flavor['memory_mb'],
+            'sgx_epc': int(new_flavor.extra_specs[utils.SGX_RESOURCE_EPC]) -
+                       int(old_flavor.extra_specs[utils.SGX_RESOURCE_EPC])
         }
 
         deltas = compute_utils.upsize_quota_delta(new_flavor, old_flavor)
@@ -1328,15 +1333,18 @@ class ComputeUtilsQuotaTestCase(test.TestCase):
     @mock.patch('nova.objects.Quotas.count_as_dict')
     def test_check_instance_quota_exceeds_with_multiple_resources(self,
                                                                   mock_count):
-        quotas = {'cores': 1, 'instances': 1, 'ram': 512}
-        overs = ['cores', 'instances', 'ram']
+        quotas = {'cores': 1, 'instances': 1, 'ram': 512, 'sgx_epc': 64}
+        overs = ['cores', 'instances', 'ram', 'sgx_epc']
         over_quota_args = dict(quotas=quotas,
-                               usages={'instances': 1, 'cores': 1, 'ram': 512},
+                               usages={'instances': 1, 'cores': 1,
+                                       'ram': 512, 'sgx_epc': 64},
                                overs=overs)
         e = exception.OverQuota(**over_quota_args)
-        fake_flavor = objects.Flavor(vcpus=1, memory_mb=512)
+        extra_specs = {utils.SGX_RESOURCE_EPC: '64'}
+        fake_flavor = objects.Flavor(
+            vcpus=1, memory_mb=512, extra_specs=extra_specs)
         instance_num = 1
-        proj_count = {'instances': 1, 'cores': 1, 'ram': 512}
+        proj_count = {'instances': 1, 'cores': 1, 'ram': 512, 'sgx_epc': 64}
         user_count = proj_count.copy()
         mock_count.return_value = {'project': proj_count, 'user': user_count}
         with mock.patch.object(objects.Quotas, 'limit_check_project_and_user',
@@ -1347,10 +1355,11 @@ class ComputeUtilsQuotaTestCase(test.TestCase):
                                                         instance_num,
                                                         instance_num)
             except exception.TooManyInstances as e:
-                self.assertEqual('cores, instances, ram', e.kwargs['overs'])
-                self.assertEqual('1, 1, 512', e.kwargs['req'])
-                self.assertEqual('1, 1, 512', e.kwargs['used'])
-                self.assertEqual('1, 1, 512', e.kwargs['allowed'])
+                self.assertEqual(
+                    'cores, instances, ram, sgx_epc', e.kwargs['overs'])
+                self.assertEqual('1, 1, 512, 64', e.kwargs['req'])
+                self.assertEqual('1, 1, 512, 64', e.kwargs['used'])
+                self.assertEqual('1, 1, 512, 64', e.kwargs['allowed'])
             else:
                 self.fail("Exception not raised")
 
@@ -1364,7 +1373,7 @@ class ComputeUtilsQuotaTestCase(test.TestCase):
         fake_flavor = objects.Flavor(vcpus=1, memory_mb=512)
         compute_utils.check_num_instances_quota(
             self.context, fake_flavor, 1, 1)
-        deltas = {'instances': 1, 'cores': 1, 'ram': 512}
+        deltas = {'instances': 1, 'cores': 1, 'ram': 512, 'sgx_epc': 0}
         # Verify that user_id has not been passed along to scope the resource
         # counting.
         mock_check.assert_called_once_with(
@@ -1384,7 +1393,7 @@ class ComputeUtilsQuotaTestCase(test.TestCase):
             fake_flavor = objects.Flavor(vcpus=1, memory_mb=512)
             compute_utils.check_num_instances_quota(
                 self.context, fake_flavor, 1, 1)
-            deltas = {'instances': 1, 'cores': 1, 'ram': 512}
+            deltas = {'instances': 1, 'cores': 1, 'ram': 512, 'sgx_epc': 0}
             # Verify that user_id is passed along to scope the resource
             # counting and limit checking.
             mock_check.assert_called_once_with(
diff --git a/nova/tests/unit/conductor/test_conductor.py b/nova/tests/unit/conductor/test_conductor.py
index d9cd719e74..6ad71a0f08 100644
--- a/nova/tests/unit/conductor/test_conductor.py
+++ b/nova/tests/unit/conductor/test_conductor.py
@@ -2850,7 +2850,8 @@ class ConductorTaskTestCase(_BaseTaskTestCase, test_compute.BaseTestCase):
 
         project_id = self.params['context'].project_id
         mock_check.assert_called_once_with(
-            self.params['context'], {'instances': 0, 'cores': 0, 'ram': 0},
+            self.params['context'],
+            {'instances': 0, 'cores': 0, 'ram': 0, 'sgx_epc': 0},
             project_id, user_id=None, check_project_id=project_id,
             check_user_id=None)
 
@@ -3023,7 +3024,7 @@ class ConductorTaskTestCase(_BaseTaskTestCase, test_compute.BaseTestCase):
 
         # Verify we called the quota check function with expected args.
         mock_check.assert_called_once_with(
-            self.context, {'instances': 0, 'cores': 0, 'ram': 0},
+            self.context, {'instances': 0, 'cores': 0, 'ram': 0, 'sgx_epc': 0},
             instance.project_id, user_id=None,
             check_project_id=instance.project_id, check_user_id=None)
 
diff --git a/nova/tests/unit/limit/test_placement.py b/nova/tests/unit/limit/test_placement.py
index 3640890c74..9c2296ea74 100644
--- a/nova/tests/unit/limit/test_placement.py
+++ b/nova/tests/unit/limit/test_placement.py
@@ -315,9 +315,9 @@ class TestEnforce(test.NoDBTestCase):
 class GetLegacyLimitsTest(test.NoDBTestCase):
     def setUp(self):
         super(GetLegacyLimitsTest, self).setUp()
-        self.new = {"servers": 1, "class:VCPU": 2, "class:MEMORY_MB": 3}
-        self.legacy = {"instances": 1, "cores": 2, "ram": 3}
-        self.resources = ["servers", "class:VCPU", "class:MEMORY_MB"]
+        self.new = {"servers": 1, "class:VCPU": 2, "class:MEMORY_MB": 3, "class:CUSTOM_SGX_EPC_MB": 4}
+        self.legacy = {"instances": 1, "cores": 2, "ram": 3, "sgx_epc": 4}
+        self.resources = ["servers", "class:VCPU", "class:MEMORY_MB", "class:CUSTOM_SGX_EPC_MB"]
         self.resources.sort()
         self.flags(driver=limit_utils.UNIFIED_LIMITS_DRIVER, group="quota")
 
@@ -329,14 +329,14 @@ class GetLegacyLimitsTest(test.NoDBTestCase):
         reglimits = {'servers': 1, 'class:VCPU': 2}
         self.useFixture(limit_fixture.LimitFixture(reglimits, {}))
         limits = placement_limits.get_legacy_default_limits()
-        self.assertEqual({'cores': 2, 'instances': 1, 'ram': 0}, limits)
+        self.assertEqual({'cores': 2, 'instances': 1, 'ram': 0, 'sgx_epc': 0}, limits)
 
     def test_get_legacy_project_limits(self):
-        reglimits = {'servers': 5, 'class:MEMORY_MB': 7}
+        reglimits = {'servers': 5, 'class:MEMORY_MB': 7, 'class:CUSTOM_SGX_EPC_MB': 9}
         projlimits = {uuids.project_id: {'servers': 1}}
         self.useFixture(limit_fixture.LimitFixture(reglimits, projlimits))
         limits = placement_limits.get_legacy_project_limits(uuids.project_id)
-        self.assertEqual({'instances': 1, 'cores': 0, 'ram': 7}, limits)
+        self.assertEqual({'instances': 1, 'cores': 0, 'ram': 7, 'sgx_epc': 9}, limits)
 
     @mock.patch.object(report.SchedulerReportClient,
                        "get_usages_counts_for_limits")
@@ -346,7 +346,7 @@ class GetLegacyLimitsTest(test.NoDBTestCase):
         mock_qfd.return_value = True
         mock_counts.return_value = {"project": {"instances": 1}}
         mock_placement.return_value = {
-            "VCPU": 2, "CUSTOM_BAREMETAL": 2, "MEMORY_MB": 3,
+            "VCPU": 2, "CUSTOM_BAREMETAL": 2, "MEMORY_MB": 3, "CUSTOM_SGX_EPC_MB": 4,
         }
         counts = placement_limits.get_legacy_counts(
             "context", uuids.project_id)
diff --git a/nova/tests/unit/objects/test_flavor.py b/nova/tests/unit/objects/test_flavor.py
index 4172d3fda3..180782da90 100644
--- a/nova/tests/unit/objects/test_flavor.py
+++ b/nova/tests/unit/objects/test_flavor.py
@@ -553,13 +553,13 @@ class TestFlavorFiltering(test.TestCase):
     def test_no_filters(self):
         filters = None
         expected = ['m1.tiny', 'm1.small', 'm1.medium', 'm1.large',
-                    'm1.xlarge', 'm1.tiny.specs']
+                    'm1.xlarge', 'm1.tiny.specs', 'm1.small.sgx']
         self.assertFilterResults(filters, expected)
 
     def test_min_memory_mb_filter(self):
         # Exclude tiny instance which is 512 MB.
         filters = {'min_memory_mb': 513}
-        expected = ['m1.small', 'm1.medium', 'm1.large', 'm1.xlarge']
+        expected = ['m1.small', 'm1.medium', 'm1.large', 'm1.xlarge', 'm1.small.sgx']
         self.assertFilterResults(filters, expected)
 
     def test_min_root_gb_filter(self):
diff --git a/nova/tests/unit/objects/test_objects.py b/nova/tests/unit/objects/test_objects.py
index 5ccb32e613..8c46ead82e 100644
--- a/nova/tests/unit/objects/test_objects.py
+++ b/nova/tests/unit/objects/test_objects.py
@@ -1118,7 +1118,7 @@ object_data = {
     'InstanceGroup': '1.11-852ac511d30913ee88f3c3a869a8f30a',
     'InstanceGroupList': '1.8-90f8f1a445552bb3bbc9fa1ae7da27d4',
     'InstanceInfoCache': '1.5-cd8b96fefe0fc8d4d337243ba0bf0e1e',
-    'InstanceList': '2.6-238f125650c25d6d12722340d726f723',
+    'InstanceList': '2.6-ac6d3375d0341a4fc02411dfa283b985',
     'InstanceMapping': '1.2-3bd375e65c8eb9c45498d2f87b882e03',
     'InstanceMappingList': '1.3-d34b6ebb076d542ae0f8b440534118da',
     'InstanceNUMACell': '1.6-25d9120d83a18356f4146f2a6fe2cc8d',
diff --git a/nova/tests/unit/scheduler/client/test_report.py b/nova/tests/unit/scheduler/client/test_report.py
index 40ebac9af9..f9ac12ea7e 100644
--- a/nova/tests/unit/scheduler/client/test_report.py
+++ b/nova/tests/unit/scheduler/client/test_report.py
@@ -31,6 +31,7 @@ from nova.scheduler import utils as scheduler_utils
 from nova import test
 from nova.tests import fixtures as nova_fixtures
 from nova.tests.unit import fake_requests
+from nova import utils
 
 
 CONF = nova.conf.CONF
@@ -4639,14 +4640,16 @@ class TestUsages(SchedulerReportClientTestCase):
         fake_project_response = fake_requests.FakeResponse(
             200, content=jsonutils.dumps(
                 {'usages': {orc.VCPU: 2,
-                            orc.MEMORY_MB: 512}}))
+                            orc.MEMORY_MB: 512,
+                            utils.SGX_RESOURCE_CLASS: 32}}))
         mock_get.side_effect = [ks_exc.ConnectFailure,
                                 ks_exc.ConnectFailure,
                                 fake_project_response]
         counts = self.client.get_usages_counts_for_quota(self.context,
                                                          'fake-project')
         self.assertEqual(3, mock_get.call_count)
-        expected = {'project': {'cores': 2, 'ram': 512}}
+        expected = {'project': {'cores': 2, 'ram': 512,
+                                'sgx_epc': 32}}
         self.assertDictEqual(expected, counts)
 
         # Project query succeeds, first project + user query has a
@@ -4655,14 +4658,16 @@ class TestUsages(SchedulerReportClientTestCase):
         fake_user_response = fake_requests.FakeResponse(
             200, content=jsonutils.dumps(
                 {'usages': {orc.VCPU: 1,
-                            orc.MEMORY_MB: 256}}))
+                            orc.MEMORY_MB: 256,
+                            utils.SGX_RESOURCE_CLASS: 16}}))
         mock_get.side_effect = [fake_project_response,
                                 ks_exc.ConnectFailure,
                                 fake_user_response]
         counts = self.client.get_usages_counts_for_quota(
             self.context, 'fake-project', user_id='fake-user')
         self.assertEqual(3, mock_get.call_count)
-        expected['user'] = {'cores': 1, 'ram': 256}
+        expected['user'] = {'cores': 1, 'ram': 256,
+                            'sgx_epc': 16}
         self.assertDictEqual(expected, counts)
 
         # Three attempts in a row have a ConnectFailure
@@ -4683,8 +4688,8 @@ class TestUsages(SchedulerReportClientTestCase):
             self.context, 'fake-project', user_id='fake-user')
 
         self.assertEqual(2, mock_get.call_count)
-        expected = {'project': {'cores': 0, 'ram': 0},
-                    'user': {'cores': 0, 'ram': 0}}
+        expected = {'project': {'cores': 0, 'ram': 0, 'sgx_epc': 0},
+                    'user': {'cores': 0, 'ram': 0, 'sgx_epc': 0}}
         self.assertDictEqual(expected, counts)
 
     @mock.patch('nova.scheduler.client.report.SchedulerReportClient.get')
@@ -4696,8 +4701,8 @@ class TestUsages(SchedulerReportClientTestCase):
         counts = self.client.get_usages_counts_for_quota(
             self.context, 'fake-project', user_id='fake-user')
         self.assertEqual(2, mock_get.call_count)
-        expected = {'project': {'cores': 4, 'ram': 0},
-                    'user': {'cores': 4, 'ram': 0}}
+        expected = {'project': {'cores': 4, 'ram': 0, 'sgx_epc': 0},
+                    'user': {'cores': 4, 'ram': 0, 'sgx_epc': 0}}
         self.assertDictEqual(expected, counts)
 
     @mock.patch('nova.scheduler.client.report.SchedulerReportClient.get')
diff --git a/nova/tests/unit/test_fixtures.py b/nova/tests/unit/test_fixtures.py
index cad58f91dd..525ed997ea 100644
--- a/nova/tests/unit/test_fixtures.py
+++ b/nova/tests/unit/test_fixtures.py
@@ -257,7 +257,7 @@ class TestDefaultFlavorsFixture(testtools.TestCase):
 
         result = conn.execute(sa.text("SELECT * FROM flavors"))
         rows = result.fetchall()
-        self.assertEqual(6, len(rows), "Rows %s" % rows)
+        self.assertEqual(7, len(rows), "Rows %s" % rows)
 
 
 class TestIndirectionAPIFixture(testtools.TestCase):
diff --git a/nova/tests/unit/test_quota.py b/nova/tests/unit/test_quota.py
index 7979d83e91..7ed9673f55 100644
--- a/nova/tests/unit/test_quota.py
+++ b/nova/tests/unit/test_quota.py
@@ -44,7 +44,8 @@ def _get_fake_get_usages(updates=None):
               'server_group_members': {'in_use': 3},
               'instances': {'in_use': 2},
               'cores': {'in_use': 4},
-              'ram': {'in_use': 10 * 1024}}
+              'ram': {'in_use': 10 * 1024},
+              'sgx_epc': {'in_use': 2}}
     if updates:
         usages.update(updates)
 
@@ -63,6 +64,7 @@ class QuotaIntegrationTestCase(test.TestCase):
         self.flags(instances=2,
                    cores=4,
                    ram=16384,
+                   sgx_epc=64,
                    group='quota')
 
         self.user_id = 'admin'
@@ -98,6 +100,7 @@ class QuotaIntegrationTestCase(test.TestCase):
             # ability to count allocations in placement.
             inst.vcpus = inst.flavor.vcpus
             inst.memory_mb = inst.flavor.memory_mb
+            inst.instance_type_id = inst.flavor.id
             inst.create()
         # Create the related instance mapping which will be used in
         # _instances_cores_ram_count().
@@ -125,6 +128,25 @@ class QuotaIntegrationTestCase(test.TestCase):
         else:
             self.fail('Expected OverQuota exception')
 
+    def test_too_many_instances_sgx(self):
+        for i in range(CONF.quota.instances):
+            self._create_instance(flavor_name='m1.small.sgx')
+        image_uuid = 'cedef40a-ed67-4d10-800e-17455edce175'
+        try:
+            _type = objects.Flavor.get_by_name(self.context, 'm1.small.sgx')
+            self.compute_api.create(self.context, min_count=1, max_count=1,
+                                    flavor=_type,
+                                    image_href=image_uuid)
+        except exception.OverQuota as e:
+            expected_kwargs = {'code': 413,
+                               'req': '1, 32',
+                               'used': '2, 64',
+                               'allowed': '2, 64',
+                               'overs': 'instances, sgx_epc'}
+            self.assertEqual(expected_kwargs, e.kwargs)
+        else:
+            self.fail('Expected OverQuota exception')
+
     def test_too_many_cores(self):
         self._create_instance()
         image_uuid = 'cedef40a-ed67-4d10-800e-17455edce175'
@@ -273,12 +295,16 @@ class UnifiedLimitsIntegrationTestCase(QuotaIntegrationTestCase):
                      'servers': 10,
                      'class:VCPU': 20,
                      'class:MEMORY_MB': 50 * 1024,
-                     'class:DISK_GB': 100}
+                     'class:DISK_GB': 100,
+                     'class:CUSTOM_SGX_EPC_MB': 64}
         self.useFixture(limit_fixture.LimitFixture(reglimits, {}))
 
     def test_too_many_instances(self):
         pass
 
+    def test_too_many_instances_sgx(self):
+        pass
+
     def test_too_many_cores(self):
         pass
 
@@ -596,6 +622,7 @@ class DbQuotaDriverTestCase(test.TestCase):
         self.flags(instances=10,
                    cores=20,
                    ram=50 * 1024,
+                   sgx_epc=64,
                    metadata_items=128,
                    injected_files=5,
                    injected_file_content_bytes=10 * 1024,
@@ -620,6 +647,7 @@ class DbQuotaDriverTestCase(test.TestCase):
                 instances=5,
                 cores=20,
                 ram=25 * 1024,
+                sgx_epc=32,
                 metadata_items=64,
                 injected_files=5,
                 injected_file_content_bytes=5 * 1024,
@@ -640,6 +668,7 @@ class DbQuotaDriverTestCase(test.TestCase):
             return dict(
                 instances=5,
                 ram=25 * 1024,
+                sgx_epc=32,
                 metadata_items=64,
                 injected_file_content_bytes=5 * 1024,
                 )
@@ -653,6 +682,7 @@ class DbQuotaDriverTestCase(test.TestCase):
             return dict(
                 instances=5,
                 ram=25 * 1024,
+                sgx_epc=16,
                 metadata_items=64,
                 injected_file_content_bytes=5 * 1024,
                 )
@@ -668,6 +698,7 @@ class DbQuotaDriverTestCase(test.TestCase):
                 instances=5,
                 cores=20,
                 ram=25 * 1024,
+                sgx_epc=16,
                 metadata_items=64,
                 injected_files=5,
                 injected_file_content_bytes=5 * 1024,
@@ -688,6 +719,7 @@ class DbQuotaDriverTestCase(test.TestCase):
             self.assertEqual(user_id, 'fake_user')
             return dict(
                 cores=10,
+                sgx_epc=8,
                 injected_files=2,
                 injected_file_path_bytes=127,
                 )
@@ -697,6 +729,7 @@ class DbQuotaDriverTestCase(test.TestCase):
             self.assertEqual(project_id, 'test_project')
             return {
                 'cores': 10,
+                'sgx_epc': 16,
                 'injected_files': 2,
                 'injected_file_path_bytes': 127,
                 }
@@ -710,8 +743,12 @@ class DbQuotaDriverTestCase(test.TestCase):
     def _get_fake_countable_resources(self):
         # Create several countable resources with fake count functions
         def fake_instances_cores_ram_count(*a, **k):
-            return {'project': {'instances': 2, 'cores': 4, 'ram': 1024},
-                    'user': {'instances': 1, 'cores': 2, 'ram': 512}}
+            return {
+                'project':
+                    {'instances': 2, 'cores': 4, 'ram': 1024, 'sgx_epc': 4},
+                'user':
+                    {'instances': 1, 'cores': 2, 'ram': 512, 'sgx_epc': 2}
+            }
 
         def fake_server_group_count(*a, **k):
             return {'project': {'server_groups': 5},
@@ -727,6 +764,8 @@ class DbQuotaDriverTestCase(test.TestCase):
             'cores', fake_instances_cores_ram_count, 'cores')
         resources['ram'] = quota.CountableResource(
             'ram', fake_instances_cores_ram_count, 'ram')
+        resources['sgx_epc'] = quota.CountableResource(
+            'sgx_epc', fake_instances_cores_ram_count, 'sgx_epc')
         resources['server_groups'] = quota.CountableResource(
             'server_groups', fake_server_group_count, 'server_groups')
         resources['server_group_members'] = quota.CountableResource(
@@ -752,6 +791,7 @@ class DbQuotaDriverTestCase(test.TestCase):
                     'instances': {'in_use': 2},
                     'cores': {'in_use': 4},
                     'ram': {'in_use': 1024},
+                    'sgx_epc': {'in_use': 4},
                     'server_groups': {'in_use': 5},
                     'server_group_members': {'in_use': 0}}
         self.assertEqual(expected, actual)
@@ -767,6 +807,7 @@ class DbQuotaDriverTestCase(test.TestCase):
                     'instances': {'in_use': 1},
                     'cores': {'in_use': 2},
                     'ram': {'in_use': 512},
+                    'sgx_epc': {'in_use': 2},
                     'server_groups': {'in_use': 3},
                     'server_group_members': {'in_use': 0}}
         self.assertEqual(expected, actual)
@@ -801,6 +842,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     limit=25 * 1024,
                     in_use=10 * 1024,
                     ),
+               sgx_epc=dict(
+                    limit=8,
+                    in_use=2
+               ),
                floating_ips=dict(
                     limit=-1,
                     in_use=0,
@@ -874,6 +919,7 @@ class DbQuotaDriverTestCase(test.TestCase):
             return [
                 models.ProjectUserQuota(resource='instances', hard_limit=5),
                 models.ProjectUserQuota(resource='cores', hard_limit=2),
+                models.ProjectUserQuota(resource='sgx_epc', hard_limit=16),
             ]
 
         self.stub_out('nova.db.main.api.quota_get_all_by_project', fake_qgabp)
@@ -911,6 +957,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     limit=25 * 1024,
                     in_use=10 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=16,
+                    in_use=2,
+                ),
                floating_ips=dict(
                     limit=-1,
                     in_use=0,
@@ -990,6 +1040,11 @@ class DbQuotaDriverTestCase(test.TestCase):
                     in_use=10 * 1024,
                     remains=25 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=16,
+                    in_use=2,
+                    remains=0,
+                ),
                 floating_ips=dict(
                     limit=-1,
                     in_use=0,
@@ -1076,6 +1131,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     limit=50 * 1024,
                     in_use=10 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=8,
+                    in_use=2,
+                    ),
                 floating_ips=dict(
                     limit=-1,
                     in_use=0,
@@ -1150,6 +1209,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     limit=25 * 1024,
                     in_use=10 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=32,
+                    in_use=2,
+                    ),
                floating_ips=dict(
                     limit=-1,
                     in_use=0,
@@ -1227,6 +1290,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     limit=25 * 1024,
                     in_use=10 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=8,
+                    in_use=2,
+                    ),
                 floating_ips=dict(
                     limit=-1,
                     in_use=0,
@@ -1303,6 +1370,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     limit=25 * 1024,
                     in_use=10 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=16,
+                    in_use=2,
+                    ),
                 floating_ips=dict(
                     limit=-1,
                     in_use=0,
@@ -1370,6 +1441,9 @@ class DbQuotaDriverTestCase(test.TestCase):
                 ram=dict(
                     limit=25 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=8,
+                    ),
                 floating_ips=dict(
                     limit=-1,
                     ),
@@ -1426,6 +1500,9 @@ class DbQuotaDriverTestCase(test.TestCase):
                 ram=dict(
                     limit=25 * 1024,
                     ),
+                sgx_epc=dict(
+                    limit=16,
+                    ),
                 floating_ips=dict(
                     limit=-1,
                     ),
@@ -1482,6 +1559,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     remains = -1
                     in_use = 5
                     limit = -1
+                elif k == 'sgx_epc':
+                    remains = 2
+                    in_use = 4
+                    limit = 16
                 elif k == 'floating_ips':
                     remains = -1
                     in_use = 0
@@ -1505,6 +1586,8 @@ class DbQuotaDriverTestCase(test.TestCase):
                     in_use = 1
                 elif k == 'cores':
                     in_use = 15
+                elif k == 'sgx_epc':
+                    in_use = 2
                 else:
                     in_use = 0
                 result[k] = {'limit': v.default,
@@ -1513,7 +1596,7 @@ class DbQuotaDriverTestCase(test.TestCase):
 
         def fake_qgabpau(context, project_id, user_id):
             self.calls.append('quota_get_all_by_project_and_user')
-            return {'instances': 2, 'cores': -1}
+            return {'instances': 2, 'cores': -1, 'sgx_epc': 8}
 
         self.stub_out('nova.db.main.api.quota_get_all_by_project',
                        fake_quota_get_all_by_project)
@@ -1549,6 +1632,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     'minimum': 0,
                     'maximum': 50 * 1024,
                     },
+                'sgx_epc': {
+                    'minimum': 2,
+                    'maximum': 10,
+                    },
                 'floating_ips': {
                     'minimum': 0,
                     'maximum': -1,
@@ -1618,6 +1705,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     'minimum': 0,
                     'maximum': -1,
                     },
+                'sgx_epc': {
+                    'minimum': 14,
+                    'maximum': -1,
+                    },
                 'floating_ips': {
                     'minimum': 0,
                     'maximum': -1,
@@ -1689,6 +1780,10 @@ class DbQuotaDriverTestCase(test.TestCase):
                     'minimum': 0,
                     'maximum': 50 * 1024,
                     },
+                'sgx_epc': {
+                     'minimum': 2,
+                     'maximum': 10,
+                    },
                 'floating_ips': {
                     'minimum': 0,
                     'maximum': -1,
@@ -2006,6 +2101,7 @@ class UnifiedLimitsDriverTestCase(NoopQuotaDriverTestCase):
             'security_groups': -1,
             'server_group_members': 10,
             'server_groups': 12,
+            'sgx_epc': -1,
         }
         self.expected_without_usages = {
             'cores': {'limit': 2},
@@ -2021,7 +2117,8 @@ class UnifiedLimitsDriverTestCase(NoopQuotaDriverTestCase):
             'security_group_rules': {'limit': -1},
             'security_groups': {'limit': -1},
             'server_group_members': {'limit': 10},
-            'server_groups': {'limit': 12}
+            'server_groups': {'limit': 12},
+            'sgx_epc': {'limit': -1},
         }
         self.expected_with_usages = {
             'cores': {'in_use': 5, 'limit': 2},
@@ -2037,7 +2134,8 @@ class UnifiedLimitsDriverTestCase(NoopQuotaDriverTestCase):
             'security_group_rules': {'in_use': 0, 'limit': -1},
             'security_groups': {'in_use': 0, 'limit': -1},
             'server_group_members': {'in_use': 0, 'limit': 10},
-            'server_groups': {'in_use': 9, 'limit': 12}
+            'server_groups': {'in_use': 9, 'limit': 12},
+            'sgx_epc': {'in_use': 0, 'limit': -1},
         }
 
     @mock.patch.object(placement_limit, "get_legacy_default_limits")
diff --git a/nova/tests/unit/virt/libvirt/test_driver.py b/nova/tests/unit/virt/libvirt/test_driver.py
index 42ccb3bc29..3da7fdee75 100644
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -29842,7 +29842,7 @@ class TestLibvirtSGX(test.NoDBTestCase):
         guest_tmp = self.Temp({'guest': None, 'virt_type': 'kvm'})
         flavor = self.Temp(
             {'extra_specs': {
-                'resources:' + libvirt_driver.SGX_RESOURCE_CLASS: epc_size}
+                'resources:' + utils.SGX_RESOURCE_CLASS: epc_size}
             }
         )
         result = self.driver._guest_add_sgx(guest_tmp, flavor, None)
diff --git a/nova/utils.py b/nova/utils.py
index 777a188637..5aceeb6f15 100644
--- a/nova/utils.py
+++ b/nova/utils.py
@@ -82,6 +82,13 @@ _SERVICE_TYPES = service_types.ServiceTypes()
 
 DEFAULT_GREEN_POOL = None
 
+XS_RES_PREFIX = 'resources'
+XS_TRAIT_PREFIX = 'trait'
+SGX_RESOURCE_CLASS = "CUSTOM_SGX_EPC_MB"
+SGX_TRAIT_NAME = "HW_CPU_X86_SGX"
+SGX_RESOURCE_EPC = ':'.join([XS_RES_PREFIX, SGX_RESOURCE_CLASS])
+SGX_TRAIT = ':'.join([XS_TRAIT_PREFIX, SGX_TRAIT_NAME])
+
 
 def _get_default_green_pool():
     global DEFAULT_GREEN_POOL
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index d73b163758..439effedf2 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -158,8 +158,6 @@ CONSOLE = "console=tty0 console=ttyS0 console=hvc0"
 GuestNumaConfig = collections.namedtuple(
     'GuestNumaConfig', ['cpuset', 'cputune', 'numaconfig', 'numatune'])
 
-SGX_RESOURCE_CLASS = "CUSTOM_SGX_EPC_MB"
-
 
 class InjectionInfo(collections.namedtuple(
         'InjectionInfo', ['network_info', 'files', 'admin_pass'])):
@@ -7216,7 +7214,8 @@ class LibvirtDriver(driver.ComputeDriver):
         """Size of sgx epc memory is determined by
         `resources:CUSTOM_SGX_EPC_MB` specified in flavor extra_spec.
         """
-        epc_mb = flavor.extra_specs.get('resources:' + SGX_RESOURCE_CLASS)
+        epc_mb = flavor.extra_specs.get(
+            'resources:' + utils.SGX_RESOURCE_CLASS)
         return None if epc_mb is None else int(epc_mb)
 
     def _guest_configure_sev(self, guest, arch, mach_type):
@@ -8971,7 +8970,7 @@ class LibvirtDriver(driver.ComputeDriver):
             }
 
         if sgx_epc_mb:
-            result[SGX_RESOURCE_CLASS] = {
+            result[utils.SGX_RESOURCE_CLASS] = {
                 'total': sgx_epc_mb,
                 'min_unit': 1,
                 'max_unit': sgx_epc_mb,
-- 
2.40.1


From bfafcb0220ce36e06258da3de68bb96f5ff3aa7c Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Mon, 16 May 2022 19:06:49 +0800
Subject: [PATCH 3/6] fix quota

Co-authored-by: Gondermann <gondermann@b1-systems.de>
---
 nova/objects/flavor.py              |  2 +-
 nova/objects/instance.py            |  6 ++++--
 nova/quota.py                       | 14 +++++++++-----
 nova/scheduler/client/report.py     |  6 ++++--
 nova/tests/unit/compute/test_api.py |  9 +++++----
 5 files changed, 23 insertions(+), 14 deletions(-)

diff --git a/nova/objects/flavor.py b/nova/objects/flavor.py
index bd51f2edc8..9b59f8482c 100644
--- a/nova/objects/flavor.py
+++ b/nova/objects/flavor.py
@@ -141,7 +141,7 @@ def _get_all_extra_specs_by_key(context, key):
         api_models.FlavorExtraSpecs.flavor_id,
         api_models.FlavorExtraSpecs.value).filter_by(key=key).all()
 
-    return {record[0]: int(record[1]) or 0 for record in records}
+    return {record[0]: int(record[1] or 0) for record in records}
 
 
 @api_db_api.context_manager.writer
diff --git a/nova/objects/instance.py b/nova/objects/instance.py
index 6dc602dac0..a361a3c785 100644
--- a/nova/objects/instance.py
+++ b/nova/objects/instance.py
@@ -1672,10 +1672,12 @@ class InstanceList(base.ObjectListBase, base.NovaObject):
 
                     {'project': {'instances': <count across project>,
                                  'cores': <count across project>,
-                                 'ram': <count across project},
+                                 'ram': <count across project>,
+                                 'sgx_epc: <count across project>},
                      'user': {'instances': <count across user>,
                               'cores': <count across user>,
-                              'ram': <count across user>}}
+                              'ram': <count across user>,
+                              'sgx_epc': <count across user>}}
         """
         return cls._get_counts_in_db(
             context, project_id, user_id=user_id, **kwargs)
diff --git a/nova/quota.py b/nova/quota.py
index 827fe10922..e0224b34c5 100644
--- a/nova/quota.py
+++ b/nova/quota.py
@@ -1302,7 +1302,7 @@ def _server_group_count_members_by_user(context, group, user_id):
 
 
 def _instances_cores_ram_count_legacy(context, project_id, user_id=None):
-    """Get the counts of instances, cores, and ram in cell databases.
+    """Get the counts of instances, cores, sgx_epc and ram in cell databases.
 
     :param context: The request context for database access
     :param project_id: The project_id to count across
@@ -1312,10 +1312,12 @@ def _instances_cores_ram_count_legacy(context, project_id, user_id=None):
 
                 {'project': {'instances': <count across project>,
                              'cores': <count across project>,
-                             'ram': <count across project>},
+                             'ram': <count across project>,
+                             'sgx_epc': <count across project>},
                  'user': {'instances': <count across user>,
                           'cores': <count across user>,
-                          'ram': <count across user>}}
+                          'ram': <count across user>,
+                          'sgx_epc': <count across user>}}
     """
     # NOTE(melwitt): Counting across cells for instances, cores, and ram means
     # we will miss counting resources if a cell is down.
@@ -1384,10 +1386,12 @@ def _instances_cores_ram_count(context, project_id, user_id=None):
 
                 {'project': {'instances': <count across project>,
                              'cores': <count across project>,
-                             'ram': <count across project>},
+                             'ram': <count across project>,
+                             'sgx_epc': <count across project>},
                  'user': {'instances': <count across user>,
                           'cores': <count across user>,
-                          'ram': <count across user>}}
+                          'ram': <count across user>,
+                          'sgx_epc': <count across user>}}
     """
     global UID_QFD_POPULATED_CACHE_BY_PROJECT
     if CONF.quota.count_usage_from_placement:
diff --git a/nova/scheduler/client/report.py b/nova/scheduler/client/report.py
index 275e519acf..e91e1b524a 100644
--- a/nova/scheduler/client/report.py
+++ b/nova/scheduler/client/report.py
@@ -2577,9 +2577,11 @@ class SchedulerReportClient(object):
         :returns: A dict containing the project-scoped and user-scoped counts
                   if user_id is specified. For example:
                     {'project': {'cores': <count across project>,
-                                 'ram': <count across project>},
+                                 'ram': <count across project>,
+                                 'sgx_epc': <count across project>},
                     {'user': {'cores': <count across user>,
-                              'ram': <count across user>},
+                              'ram': <count across user>,
+                              'sgx_epc': <count across user>},
         :raises: `exception.UsagesRetrievalFailed` if a placement API call
                  fails
         """
diff --git a/nova/tests/unit/compute/test_api.py b/nova/tests/unit/compute/test_api.py
index 85adffd463..fec1de05d6 100644
--- a/nova/tests/unit/compute/test_api.py
+++ b/nova/tests/unit/compute/test_api.py
@@ -2255,19 +2255,20 @@ class _ComputeAPIUnitTestMixIn(object):
         fake_inst = self._create_instance_obj()
         fake_inst.flavor = cur_flavor
         new_flavor = objects.Flavor(id=2, name='bar', vcpus=1, memory_mb=2048,
-                                    root_gb=10, disabled=False, extra_specs={})
+                                    root_gb=10, disabled=False,
+                                    extra_specs={utils.SGX_RESOURCE_EPC: '32'})
         mock_get.return_value = new_flavor
         mock_check.side_effect = exception.OverQuota(
             overs=['ram'], quotas={'cores': 1, 'ram': 2048, 'sgx_epc': 1024},
-            usages={'instances': 1, 'cores': 1, 'ram': 2048, 'sgx_epc': 0},
+            usages={'instances': 1, 'cores': 1, 'ram': 1024, 'sgx_epc': 0},
             headroom={'ram': 2048})
 
         self.assertRaises(exception.TooManyInstances, self.compute_api.resize,
                           self.context, fake_inst, flavor_id='new')
         mock_check.assert_called_once_with(
                 self.context,
-                user_values={'cores': 1, 'ram': 2560, 'sgx_epc': 0},
-                project_values={'cores': 1, 'ram': 2560, 'sgx_epc': 0},
+                user_values={'cores': 1, 'ram': 2560, 'sgx_epc': 32},
+                project_values={'cores': 1, 'ram': 2560, 'sgx_epc': 32},
                 project_id=fake_inst.project_id, user_id=fake_inst.user_id)
 
     @mock.patch('nova.servicegroup.api.API.service_is_up',
-- 
2.40.1


From 4403ad051b19078eb29598baaf73a4e78b2725cf Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Sun, 5 Jun 2022 23:09:23 +0800
Subject: [PATCH 4/6] fix check of flavor extra_specs

Co-authored-by: Gondermann <gondermann@b1-systems.de>
---
 nova/api/openstack/compute/flavors_extraspecs.py | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/nova/api/openstack/compute/flavors_extraspecs.py b/nova/api/openstack/compute/flavors_extraspecs.py
index b947e590c2..1969953ae9 100644
--- a/nova/api/openstack/compute/flavors_extraspecs.py
+++ b/nova/api/openstack/compute/flavors_extraspecs.py
@@ -35,10 +35,11 @@ class FlavorExtraSpecsController(wsgi.Controller):
         return dict(extra_specs=flavor.extra_specs)
 
     def _extra_check_for_sgx_epc(self, value):
-        if isinstance(value, (six.integer_types,)) and value > 0:
-            return
-        raise exception.InvalidInput(
-            reason="%s must be a positive integer." % utils.SGX_RESOURCE_EPC)
+        try:
+            int(value)
+        except ValueError:
+            raise exception.InvalidInput(
+                reason="%s must be a positive integer." % utils.SGX_RESOURCE_EPC)
 
     def _check_extra_specs_value(self, req, specs):
         validation_supported = api_version_request.is_supported(
-- 
2.40.1


From 42c73a85d640465ac43ba64f0ecd04346f582d38 Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Fri, 15 Jul 2022 22:20:31 +0800
Subject: [PATCH 5/6] Support for SDL tests

Co-authored-by: Gondermann <gondermann@b1-systems.de>
---
 .../api/openstack/compute/flavors_extraspecs.py |  5 +++++
 nova/tests/fixtures/libvirt.py                  |  2 ++
 nova/tests/unit/virt/libvirt/test_driver.py     |  7 +++++++
 nova/tests/unit/virt/libvirt/test_host.py       | 17 ++++++++++++++++-
 nova/virt/libvirt/host.py                       |  4 ++++
 5 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/nova/api/openstack/compute/flavors_extraspecs.py b/nova/api/openstack/compute/flavors_extraspecs.py
index 1969953ae9..9a786e3041 100644
--- a/nova/api/openstack/compute/flavors_extraspecs.py
+++ b/nova/api/openstack/compute/flavors_extraspecs.py
@@ -106,6 +106,11 @@ class FlavorExtraSpecsController(wsgi.Controller):
             expl = _('Request body and URI mismatch')
             raise webob.exc.HTTPBadRequest(explanation=expl)
         flavor = common.get_flavor(context, flavor_id)
+        if utils.SGX_RESOURCE_EPC in flavor.extra_specs:
+            expl = _('Update %(spec)s in extra spec of flavor %(flavor_id)'
+                     ' is forbidden.') % dict(spec=utils.SGX_RESOURCE_EPC,
+                                              flavor_id=flavor_id)
+            raise webob.exc.HTTPConflict(explanation=expl)
         try:
             flavor.extra_specs = dict(flavor.extra_specs, **body)
             flavor.save()
diff --git a/nova/tests/fixtures/libvirt.py b/nova/tests/fixtures/libvirt.py
index 4f48463118..52eeb89a38 100644
--- a/nova/tests/fixtures/libvirt.py
+++ b/nova/tests/fixtures/libvirt.py
@@ -2290,6 +2290,8 @@ class LibvirtFixture(fixtures.Fixture):
         def fake_exists(path):
             if path == host.SEV_KERNEL_PARAM_FILE:
                 return False
+            if path == host.SGX_KERNEL_PARAM_FILE:
+                return False
             return real_exists(path)
 
         self.useFixture(fixtures.MonkeyPatch('os.path.exists', fake_exists))
diff --git a/nova/tests/unit/virt/libvirt/test_driver.py b/nova/tests/unit/virt/libvirt/test_driver.py
index 3da7fdee75..dead294bb4 100644
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -7230,6 +7230,8 @@ class LibvirtConnTestCase(test.NoDBTestCase,
         self.assertEqual(cfg.devices[5].rate_bytes, 1024)
         self.assertEqual(cfg.devices[5].rate_period, 2)
 
+    @mock.patch('nova.virt.libvirt.host.Host.supports_intel_sgx',
+                new=mock.Mock(return_value=False))
     @test.patch_exists(SEV_KERNEL_PARAM_FILE, result=False, other=True)
     def test_get_guest_config_with_rng_backend(self):
         self.flags(virt_type='kvm',
@@ -7829,6 +7831,8 @@ class LibvirtConnTestCase(test.NoDBTestCase,
     @mock.patch.object(libvirt_driver.LibvirtDriver,
                        "_get_guest_storage_config")
     @mock.patch.object(libvirt_driver.LibvirtDriver, "_has_numa_support")
+    @mock.patch('nova.virt.libvirt.host.Host.supports_intel_sgx',
+                new=mock.Mock(return_value=False))
     @test.patch_exists(SEV_KERNEL_PARAM_FILE, result=False, other=True)
     def test_get_guest_config_aarch64(self, mock_numa, mock_storage):
         TEST_AMOUNT_OF_PCIE_SLOTS = 8
@@ -7866,6 +7870,8 @@ class LibvirtConnTestCase(test.NoDBTestCase,
     @mock.patch.object(libvirt_driver.LibvirtDriver,
                        "_get_guest_storage_config")
     @mock.patch.object(libvirt_driver.LibvirtDriver, "_has_numa_support")
+    @mock.patch('nova.virt.libvirt.host.Host.supports_intel_sgx',
+                new=mock.Mock(return_value=False))
     @test.patch_exists(SEV_KERNEL_PARAM_FILE, result=False, other=True)
     def test_get_guest_config_aarch64_with_graphics(
         self, mock_numa, mock_storage,
@@ -29809,6 +29815,7 @@ class TestLibvirtSGX(test.NoDBTestCase):
 
     def setUp(self):
         super(TestLibvirtSGX, self).setUp()
+        self.useFixture(nova_fixtures.LibvirtFixture())
         self.driver = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), True)
 
     @mock.patch('nova.virt.libvirt.host.Host.supports_intel_sgx',
diff --git a/nova/tests/unit/virt/libvirt/test_host.py b/nova/tests/unit/virt/libvirt/test_host.py
index 69ae5689c1..0b34622718 100644
--- a/nova/tests/unit/virt/libvirt/test_host.py
+++ b/nova/tests/unit/virt/libvirt/test_host.py
@@ -2209,7 +2209,7 @@ class TestLibvirtSGXSupport(test.NoDBTestCase):
     def setUp(self):
         super(TestLibvirtSGXSupport, self).setUp()
 
-        self.useFixture(fakelibvirt.FakeLibvirtFixture())
+        self.useFixture(nova_fixtures.LibvirtFixture())
         self.host = host.Host("qemu:///system")
 
     @mock.patch.object(os.path, 'exists', return_value=False)
@@ -2229,6 +2229,21 @@ class TestLibvirtSGXSupport(test.NoDBTestCase):
         self.assertFalse(self.host._kernel_supports_intel_sgx())
         fake_exists.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
 
+    @mock.patch.object(os.path, 'exists', return_value=True)
+    @mock.patch.object(os.path, 'islink', return_value=True)
+    def test_kernel_parameter_link_fail(self, fake_exists, fake_islink):
+        self.assertFalse(self.host._kernel_supports_intel_sgx())
+        fake_exists.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
+        fake_islink.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
+
+    @mock.patch.object(os.path, 'exists', return_value=True)
+    @mock.patch.object(os.path, 'islink', return_value=False)
+    @mock.patch('builtins.open', mock.mock_open(read_data="N\n"))
+    def test_kernel_parameter_link_pass(self, fake_exists, fake_islink):
+        self.assertFalse(self.host._kernel_supports_intel_sgx())
+        fake_exists.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
+        fake_islink.assert_called_once_with(host.SGX_KERNEL_PARAM_FILE)
+
     @mock.patch('nova.virt.libvirt.host.Host._kernel_supports_intel_sgx',
                 new=mock.Mock(return_value=True))
     def test_supports_intel_sgx(self):
diff --git a/nova/virt/libvirt/host.py b/nova/virt/libvirt/host.py
index 9a84da1924..09a8874204 100644
--- a/nova/virt/libvirt/host.py
+++ b/nova/virt/libvirt/host.py
@@ -1807,6 +1807,10 @@ class Host(object):
             LOG.debug("%s does not exist", SGX_KERNEL_PARAM_FILE)
             return False
 
+        if os.path.islink(SGX_KERNEL_PARAM_FILE):
+            LOG.error("%s is a soft link file", SGX_KERNEL_PARAM_FILE)
+            return False
+
         with open(SGX_KERNEL_PARAM_FILE) as f:
             contents = f.read()
             LOG.debug("%s contains [%s]", SGX_KERNEL_PARAM_FILE, contents)
-- 
2.40.1


From 341f12316a59cd9b67d487e5dba5c1a660d71756 Mon Sep 17 00:00:00 2001
From: Gondermann <gondermann@b1-systems.de>
Date: Wed, 20 Dec 2023 15:52:43 +0100
Subject: [PATCH 6/6] Make nova spin up SGX instances (experimental)

Signed-off-by: Gondermann <gondermann@b1-systems.de>
---
 nova/tests/unit/virt/libvirt/test_driver.py |  5 --
 nova/virt/libvirt/config.py                 | 60 ++++++++++-----------
 nova/virt/libvirt/driver.py                 | 58 +++++++++++++-------
 3 files changed, 70 insertions(+), 53 deletions(-)

diff --git a/nova/tests/unit/virt/libvirt/test_driver.py b/nova/tests/unit/virt/libvirt/test_driver.py
index dead294bb4..536c4b53bf 100644
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -29854,8 +29854,3 @@ class TestLibvirtSGX(test.NoDBTestCase):
         )
         result = self.driver._guest_add_sgx(guest_tmp, flavor, None)
         self.assertIsNone(result)
-        self.assertTrue(
-            isinstance(guest_tmp.sgx,
-                       vconfig.LibvirtConfigGuestQemuCommandLine))
-        _str = 'memory-backend-epc,id=mem1,size=%dM,prealloc=on' % epc_size
-        self.assertTrue(_str in guest_tmp.sgx.arguments)
diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index 42e4005295..7b95dbd90c 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -42,6 +42,8 @@ from nova.virt import hardware
 NOVA_NS = "http://openstack.org/xmlns/libvirt/nova/1.1"
 QEMU_NS = "http://libvirt.org/schemas/domain/qemu/1.0"
 
+from oslo_log import log as logging
+LOG = logging.getLogger(__name__)
 
 class LibvirtConfigObject(object):
 
@@ -2901,33 +2903,36 @@ class LibvirtConfigGuestFeatureVMCoreInfo(LibvirtConfigGuestFeature):
         super().__init__('vmcoreinfo', **kwargs)
 
 
-class LibvirtConfigGuestQemuCommandLine(LibvirtConfigObject):
-
+class LibvirtConfigGuestSGXDevice(LibvirtConfigGuestDevice):
     def __init__(self, **kwargs):
-        super(LibvirtConfigGuestQemuCommandLine, self).__init__(
-            root_name='commandline', ns_prefix="qemu", ns_uri=QEMU_NS)
-        # List of strings, each item is the argument of the command line.
-        # For example, launch a SGX guest with the cmd:
-        # `qemu-system-x86_64 \
-        # -cpu host,+sgx-provisionkey \
-        # -object memory-backend-epc,id=mem1,size=64M,prealloc=on \
-        # -M sgx-epc.0.memdev=mem1,sgx-epc.0.node=0`,
-        # arguments will be:
-        # ['-cpu',
-        #  'host,+sgx-provisionkey',
-        #  '-object',
-        #  'memory-backend-epc,id=mem1,size=64M,prealloc=on',
-        #  '-M',
-        #  'sgx-epc.0.memdev=mem1,sgx-epc.0.node=0']
-        self.arguments = []
+        super(LibvirtConfigGuestSGXDevice, self).__init__(root_name="memory",
+                                                         **kwargs)
+        self.model = 'sgx-epc'
+        self.sgx_epc_mb = 0
+        self.sgx_node = 0
+        self.node_count = 1
 
     def format_dom(self):
-        cmdline = super(LibvirtConfigGuestQemuCommandLine, self).format_dom()
-        for argument in self.arguments:
-            arg = self._new_node("arg")
-            arg.set("value", argument)
-            cmdline.append(arg)
-        return cmdline
+        dev = super(LibvirtConfigGuestSGXDevice, self).format_dom()
+
+        dev.set('model', self.model)
+
+        source = etree.Element("source")
+        nodemask = etree.Element("nodemask")
+        nodemask.text = "0-" + str(self.node_count - 1)
+        source.append(nodemask)
+        dev.append(source)
+
+        target = etree.Element("target")
+        size = etree.Element("size", unit="KiB")
+        size.text = str(self.sgx_epc_mb * units.Ki)
+        target.append(size)
+        node = etree.Element("node")
+        node.text = str(self.sgx_node)
+        target.append(node)
+        dev.append(target)
+
+        return dev
 
 
 class LibvirtConfigGuest(LibvirtConfigObject):
@@ -2975,7 +2980,6 @@ class LibvirtConfigGuest(LibvirtConfigObject):
         self.idmaps = []
         self.perf_events = []
         self.launch_security = None
-        self.sgx = None
 
     def _format_basic_props(self, root):
         root.append(self._text_node("uuid", self.uuid))
@@ -3101,10 +3105,6 @@ class LibvirtConfigGuest(LibvirtConfigObject):
         if self.launch_security is not None:
             root.append(self.launch_security.format_dom())
 
-    def _format_sgx(self, root):
-        if self.sgx is not None:
-            root.append(self.sgx.format_dom())
-
     def format_dom(self):
         root = super(LibvirtConfigGuest, self).format_dom()
 
@@ -3135,7 +3135,7 @@ class LibvirtConfigGuest(LibvirtConfigObject):
 
         self._format_sev(root)
 
-        self._format_sgx(root)
+        LOG.debug('xml=%s', etree.tostring(root, encoding='unicode', pretty_print=True))
 
         return root
 
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 439effedf2..22c3e41712 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -7244,25 +7244,47 @@ class LibvirtDriver(driver.ComputeDriver):
         guest.launch_security = launch_security
 
     def _guest_add_sgx(self, guest, flavor, image_meta):
-        if guest.virt_type in ('qemu', 'kvm'):
-            if hardware.get_sgx_trait_constraint(flavor, image_meta):
-                for flag in CONF.libvirt.sgx_features:
-                    guest.cpu.add_feature(
-                        vconfig.LibvirtConfigGuestCPUFeature(flag))
-            else:
-                return
-            sgx_epc_mb = self._get_guest_sgx_epc_mb(flavor)
-            if sgx_epc_mb is None:
+        if not guest.virt_type in ('qemu', 'kvm'):
+            return
+
+        if hardware.get_sgx_trait_constraint(flavor, image_meta):
+            for flag in CONF.libvirt.sgx_features:
+                guest.cpu.add_feature(
+                    vconfig.LibvirtConfigGuestCPUFeature(flag))
+        else:
+            return
+
+        sgx_epc_mb = self._get_guest_sgx_epc_mb(flavor)
+        if sgx_epc_mb is None:
+            return
+
+        if not guest.max_memory_size:
+            if not guest.memory:
                 return
-            sgx_qemu_commandline = vconfig.LibvirtConfigGuestQemuCommandLine()
-            sgx_qemu_commandline.arguments = [
-                '-object',
-                'memory-backend-epc,id=mem1,size=%dM,'
-                'prealloc=on' % sgx_epc_mb,
-                '-M',
-                'sgx-epc.0.memdev=mem1'
-            ]
-            guest.sgx = sgx_qemu_commandline
+            guest.max_memory_size = guest.memory
+            guest.max_memory_slots = 0
+
+        guest.max_memory_size += (sgx_epc_mb * units.Ki)
+        guest.max_memory_slots += 1
+
+        if not guest.cpu.numa:
+            numa = vconfig.LibvirtConfigGuestCPUNUMA()
+            cellcount = 1
+            memory_per_cell = guest.memory // cellcount
+            for i in range(cellcount):
+                cell = vconfig.LibvirtConfigGuestCPUNUMACell()
+                cell.id = i
+                cell.cpus = {i}
+                cell.memory = memory_per_cell
+                cell.unit="KiB"
+                numa.cells.append(cell)
+            guest.cpu.numa = numa
+
+        sgx_device = vconfig.LibvirtConfigGuestSGXDevice()
+        sgx_device.sgx_epc_mb = sgx_epc_mb
+        sgx_device.sgx_node = 0
+        sgx_device.node_count = len(guest.cpu.numa.cells)
+        guest.add_device(sgx_device)
 
     def _find_sev_feature(self, arch, mach_type):
         """Search domain capabilities for the given arch and machine type
-- 
2.40.1

